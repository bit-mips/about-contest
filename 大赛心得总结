# 龙芯杯系统能力培养大赛心得总结

作者 江学谦 朱威浦

北京理工大学 计算机学院 2015 级

2018 年10 月8 日

## 目录

<!-- TOC -->

- [龙芯杯系统能力培养大赛心得总结](#%E9%BE%99%E8%8A%AF%E6%9D%AF%E7%B3%BB%E7%BB%9F%E8%83%BD%E5%8A%9B%E5%9F%B9%E5%85%BB%E5%A4%A7%E8%B5%9B%E5%BF%83%E5%BE%97%E6%80%BB%E7%BB%93)
    - [目录](#%E7%9B%AE%E5%BD%95)
    - [前言](#%E5%89%8D%E8%A8%80)
    - [第一章 漫长的赛前准备（上）](#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%BC%AB%E9%95%BF%E7%9A%84%E8%B5%9B%E5%89%8D%E5%87%86%E5%A4%87%E4%B8%8A)
        - [第一节 吹响集结号](#%E7%AC%AC%E4%B8%80%E8%8A%82-%E5%90%B9%E5%93%8D%E9%9B%86%E7%BB%93%E5%8F%B7)
        - [第二节 自学新知识](#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%87%AA%E5%AD%A6%E6%96%B0%E7%9F%A5%E8%AF%86)
        - [第三节 定期开组会](#%E7%AC%AC%E4%B8%89%E8%8A%82-%E5%AE%9A%E6%9C%9F%E5%BC%80%E7%BB%84%E4%BC%9A)
        - [第四节 麻烦的软件安装](#%E7%AC%AC%E5%9B%9B%E8%8A%82-%E9%BA%BB%E7%83%A6%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85)
        - [第五节 按时更新 Wiki](#%E7%AC%AC%E4%BA%94%E8%8A%82-%E6%8C%89%E6%97%B6%E6%9B%B4%E6%96%B0-wiki)
        - [第六节 clone 第一份代码](#%E7%AC%AC%E5%85%AD%E8%8A%82-clone-%E7%AC%AC%E4%B8%80%E4%BB%BD%E4%BB%A3%E7%A0%81)
        - [第七节 尝试复现 CPU](#%E7%AC%AC%E4%B8%83%E8%8A%82-%E5%B0%9D%E8%AF%95%E5%A4%8D%E7%8E%B0-cpu)
        - [第八节 消散的参赛队员](#%E7%AC%AC%E5%85%AB%E8%8A%82-%E6%B6%88%E6%95%A3%E7%9A%84%E5%8F%82%E8%B5%9B%E9%98%9F%E5%91%98)
        - [第九节 北理合伙人](#%E7%AC%AC%E4%B9%9D%E8%8A%82-%E5%8C%97%E7%90%86%E5%90%88%E4%BC%99%E4%BA%BA)
        - [第十节 发现新大陆](#%E7%AC%AC%E5%8D%81%E8%8A%82-%E5%8F%91%E7%8E%B0%E6%96%B0%E5%A4%A7%E9%99%86)
    - [第二章 漫长的赛前准备（下）](#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%BC%AB%E9%95%BF%E7%9A%84%E8%B5%9B%E5%89%8D%E5%87%86%E5%A4%87%E4%B8%8B)
        - [第一节 重新召集队员](#%E7%AC%AC%E4%B8%80%E8%8A%82-%E9%87%8D%E6%96%B0%E5%8F%AC%E9%9B%86%E9%98%9F%E5%91%98)
        - [第二节 再次复现实验](#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%86%8D%E6%AC%A1%E5%A4%8D%E7%8E%B0%E5%AE%9E%E9%AA%8C)
        - [第三节 报名参赛](#%E7%AC%AC%E4%B8%89%E8%8A%82-%E6%8A%A5%E5%90%8D%E5%8F%82%E8%B5%9B)
        - [第四节 一起移植软件](#%E7%AC%AC%E5%9B%9B%E8%8A%82-%E4%B8%80%E8%B5%B7%E7%A7%BB%E6%A4%8D%E8%BD%AF%E4%BB%B6)
    - [第三章 艰难的初赛设计计](#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%89%B0%E9%9A%BE%E7%9A%84%E5%88%9D%E8%B5%9B%E8%AE%BE%E8%AE%A1%E8%AE%A1)
        - [第一节 蹭一蹭清华的小学期](#%E7%AC%AC%E4%B8%80%E8%8A%82-%E8%B9%AD%E4%B8%80%E8%B9%AD%E6%B8%85%E5%8D%8E%E7%9A%84%E5%B0%8F%E5%AD%A6%E6%9C%9F)
        - [第二节 开始我们的设计](#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%BC%80%E5%A7%8B%E6%88%91%E4%BB%AC%E7%9A%84%E8%AE%BE%E8%AE%A1)
        - [第三节 转战 214](#%E7%AC%AC%E4%B8%89%E8%8A%82-%E8%BD%AC%E6%88%98-214)
        - [第四节 失败的尝试](#%E7%AC%AC%E5%9B%9B%E8%8A%82-%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%B0%9D%E8%AF%95)
        - [第五节 基础版本流水线新鲜出炉](#%E7%AC%AC%E4%BA%94%E8%8A%82-%E5%9F%BA%E7%A1%80%E7%89%88%E6%9C%AC%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%96%B0%E9%B2%9C%E5%87%BA%E7%82%89)
        - [第六节 移植 Supervisor](#%E7%AC%AC%E5%85%AD%E8%8A%82-%E7%A7%BB%E6%A4%8D-supervisor)
        - [第七节 适配初赛框架](#%E7%AC%AC%E4%B8%83%E8%8A%82-%E9%80%82%E9%85%8D%E5%88%9D%E8%B5%9B%E6%A1%86%E6%9E%B6)
        - [第八节 再见小学期](#%E7%AC%AC%E5%85%AB%E8%8A%82-%E5%86%8D%E8%A7%81%E5%B0%8F%E5%AD%A6%E6%9C%9F)
        - [第九节 错综复杂的 AXI](#%E7%AC%AC%E4%B9%9D%E8%8A%82-%E9%94%99%E7%BB%BC%E5%A4%8D%E6%9D%82%E7%9A%84-axi)
        - [第十节 难以提高的性能](#%E7%AC%AC%E5%8D%81%E8%8A%82-%E9%9A%BE%E4%BB%A5%E6%8F%90%E9%AB%98%E7%9A%84%E6%80%A7%E8%83%BD)
        - [第十一节 提交初赛作品](#%E7%AC%AC%E5%8D%81%E4%B8%80%E8%8A%82-%E6%8F%90%E4%BA%A4%E5%88%9D%E8%B5%9B%E4%BD%9C%E5%93%81)
    - [第四章 迷离曲折的决赛设计计](#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%BF%B7%E7%A6%BB%E6%9B%B2%E6%8A%98%E7%9A%84%E5%86%B3%E8%B5%9B%E8%AE%BE%E8%AE%A1%E8%AE%A1)
        - [第一节 ucore 还是 Linux](#%E7%AC%AC%E4%B8%80%E8%8A%82-ucore-%E8%BF%98%E6%98%AF-linux)
        - [第二节 赶上暑假的小尾巴](#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E8%B5%B6%E4%B8%8A%E6%9A%91%E5%81%87%E7%9A%84%E5%B0%8F%E5%B0%BE%E5%B7%B4)
        - [第三节 改动流水线](#%E7%AC%AC%E4%B8%89%E8%8A%82-%E6%94%B9%E5%8A%A8%E6%B5%81%E6%B0%B4%E7%BA%BF)
        - [第四节 搭建新的 SoC](#%E7%AC%AC%E5%9B%9B%E8%8A%82-%E6%90%AD%E5%BB%BA%E6%96%B0%E7%9A%84-soc)
        - [第六节 被性能耽误的 Linux](#%E7%AC%AC%E5%85%AD%E8%8A%82-%E8%A2%AB%E6%80%A7%E8%83%BD%E8%80%BD%E8%AF%AF%E7%9A%84-linux)
        - [第七节 兜兜转转原地转圈](#%E7%AC%AC%E4%B8%83%E8%8A%82-%E5%85%9C%E5%85%9C%E8%BD%AC%E8%BD%AC%E5%8E%9F%E5%9C%B0%E8%BD%AC%E5%9C%88)
        - [第八节 柳暗花明又一村](#%E7%AC%AC%E5%85%AB%E8%8A%82-%E6%9F%B3%E6%9A%97%E8%8A%B1%E6%98%8E%E5%8F%88%E4%B8%80%E6%9D%91)
        - [第九节 作品的收尾工作](#%E7%AC%AC%E4%B9%9D%E8%8A%82-%E4%BD%9C%E5%93%81%E7%9A%84%E6%94%B6%E5%B0%BE%E5%B7%A5%E4%BD%9C)
    - [第五章 哨声吹响响](#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%93%A8%E5%A3%B0%E5%90%B9%E5%93%8D%E5%93%8D)
        - [第一节 省事的新指令答题](#%E7%AC%AC%E4%B8%80%E8%8A%82-%E7%9C%81%E4%BA%8B%E7%9A%84%E6%96%B0%E6%8C%87%E4%BB%A4%E7%AD%94%E9%A2%98)
        - [第二节 为 ucore 添加新功能](#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E4%B8%BA-ucore-%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%8A%9F%E8%83%BD)
        - [第三节 开始我们的表演](#%E7%AC%AC%E4%B8%89%E8%8A%82-%E5%BC%80%E5%A7%8B%E6%88%91%E4%BB%AC%E7%9A%84%E8%A1%A8%E6%BC%94)
        - [第四节 成绩单下达](#%E7%AC%AC%E5%9B%9B%E8%8A%82-%E6%88%90%E7%BB%A9%E5%8D%95%E4%B8%8B%E8%BE%BE)
    - [第六章 路漫漫其修远兮](#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E8%B7%AF%E6%BC%AB%E6%BC%AB%E5%85%B6%E4%BF%AE%E8%BF%9C%E5%85%AE)
    - [番外篇](#%E7%95%AA%E5%A4%96%E7%AF%87)
    - [完结](#%E5%AE%8C%E7%BB%93)

<!-- /TOC -->

## 前言

第二届“龙芯杯”系统能力培养大赛已经结束，回想长达一年的准备，点滴心血皆历历

在目。虽然最终没能取得很好的成绩，但无论如何，这个过程的收获颇丰，准备过程中也确

实遇到过很多障碍，故仅能以此文记录参赛过程的琐碎杂事，权当以另一种形式展现自己的

心路历程。

## 第一章 漫长的赛前准备（上）

### 第一节 吹响集结号

2017 年10 月份，大三上学期的小学期课程刚结束不久，便看到导员帮陆老师在年级群

里发布的系统能力培养大赛的通知。想来刚开学也闲来无事，好不容易搬回村里来了，应该

多给自己找些事做做。抱着张张见识的心态，我联系了陆老师，想要了解一下比赛情况和内

容。

起初看到陆老师的回复，便隐隐感觉到这个比赛并不好做，因为对于当时刚上大三的我

来说，对于陆老师所提到的CPU、操作系统、编译器等专业方面的知识都一概不知。

周一早上我如约去到陆老师的实验室，等待了一会，陆续又有其他同学也来到了实验室，

还有的同学干脆把第二节课翘掉急忙赶来。陆老师先是和我们寒暄了几句，询问一下个人的

基本情况，想确认一下同学参加比赛的意愿和决心。陆老师是一个十分亲和的人，虽然第一

次见面，但是聊起天来却没有压力。在她的介绍中，我得知这个比赛是第二次举办，我们学

校还是第一次参加，没有前人的经验可以借鉴。听完后我们都表示还没有接触过相关方面的

知识，不知道如何着手，陆老师便安慰我们说，现在手上已经有一个能够运行的作品——清

华上一届获得比赛第一名的作品，而且清华大学的向老师也会过来指导我们的比赛。听到这

样的话大家的心里才稍微有了点底子。

开始时报名参加比赛的同学很多，前前后后加入比赛微信群的人数一度高达二十几个。

按照目标，我们需要涉及到CPU、操作系统、编译器等三个方向的知识，所以老师一开始便

让我们先有所侧重，选择自己感兴趣的方向来复现实现——运行已有的实验作品。我个人比

较喜欢做硬件，做 CPU 听起来也十分有趣，所以就选择了 CPU 方向作为参加比赛的侧重

点。

### 第二节 自学新知识

我觉得老师可能默认了我们学校会提供流水线设计方面的课程，但是其实并没有。计算

机体系结构课程中会对流水线的概念做出解释，但是完全不涉及到如何实现。计算机组成原

理讲解计算机的构成，操作系统介绍操作系统的构成和运行原理，汇编接口学的是 x86 体

系，编译原理把课程重心完全放在了编译器前端，讲的都是词法分析和语法分析的原理，学

完还是不知道gcc 为何物。实现MIPS CPU 是大四小学期的实验内容，单周期和多周期都有

涉及，但是没有到达流水线的层面。于是要做比赛，就只能自学。确定了要参加比赛后，我

便开始着手CPU 设计方面的知识学习。网上看到好评还不错一些书——《自己动手写CPU》、

《CPU 自制入门》等，都是适合新手从零起步直接去做一个 CPU，查了一下图书馆有《自

己动手写CPU》的馆藏，所以就直接借了这本书回来作为入门学习的书籍。500 多页的一本

书，摆在书架上比我其他任何一本书都要厚实得多，草草翻看了几页，觉得书本的知识还是

挺通俗易懂的，麻烦的是内容实在是多，需要花很长时间才能看完。我干脆把它摆在了床边

作为睡前读物，就这样，在一年的时间里，我从头到尾把这本书读了两遍，心里面对OpenMips

这个开源的CPU 熟的不能再熟。当然也通过这种方式认识到了FPGA，Verilog，MIPS 指令

架构，流水线设计等基本的知识。但是这样的学习方式却给我带来很多的局限性，比如对于

CPU 设计方式、MIPS 整体架构的认识、SoC 设计的狭隘等诸多问题，这个我会在往后再详

细介绍。不管怎样，这本书的学习过程还是让自己产生了设计 CPU 的兴趣，增加了做比赛

的信心。

### 第三节 定期开组会

比赛准备工作的安排都交由向老师负责，每两周固定开一次例会。每次都是向老师从清

华过来主持会议，原以为从清华来北理工也是一件容易事，直到我去清华参加暑期小学期，

得每天 7 点就坐半个小时公交车兜兜转转才能去到清华东门时，才知道这是多么不容易的

一件事。

第一次正式开会是一个周六的上午，第一个学期的例会都是在机房103 举行的，毕竟开

始时人多，其他地方都坐不下。当时我完全忘记了老师在微信群里发过的消息，闹钟都没定

就错过了。幸好其他同学都过去了，会议也如期举行，会后有同学把我拉进了 CPU 小组的

讨论群里，大概了解了一下会议的内容就是确定每个小组的工作内容，CPU 工作小组的内

容是配置环境，由于大家都没有接触过FPGA 设计，对于Xilinx、Vivado 这些名词一点儿也

不熟。同组的同学说隐约记得老师让我们装一个叫做 V 什么的软件。。。计算机专业的比赛

对环境的要求就是简单，一台电脑、一个软件就能搞定所有事情。当然如你所料，连软件的

名字都没有弄明白的人，怎么可能会配得好环境呢！

第二次开会，也是我第一次去参加例会，人还是比较多的，当然已经不是报名参加比赛

时候的人数了。向老师询问到我的进展情况时我说自己仅了解和学习了一些 Verilog 语法知

识。当时对比赛内容还是不太熟悉，其实并不知道接下来自己要干些什么事情，除了配置环

境。

向老师一开始给我们定的目标是希望能够借着清华同学的实验成果运行一次实验内容，

负责每个部分的同学先将自己所负责的任务弄通，然后写配置过程文档，作为其他组复现实

验的依据，以减少复现实验所花费的时间，也降低一部分难度。无奈理想与现实都是有差距

的，我记得在往后数次会议中，在向老师不厌其烦地向我们阐述这一个指导思想后，我才终

于弄明白复现实验是什么意思——不是要我们马上照着别人的代码马上就写一份，而是先把

前人的结果直接拿过来跑一次。

### 第四节 麻烦的软件安装

第一次和 Vivado 打交道，是在第二次会议结束后，我和其他几个小组的成员计划着先

下载 Vivado 的安装包。本以为安装个软件没有什么问题，谁知上网一搜索，一个安装包整

个20G，摸摸我的钱包，这个月的网费怕是交不起了。当然这还是小意思，只是以这个校园

网的速度，要把安装包下完，估计比赛都结束了吧。。。只好忙着上pt 站搜索一下，几M 每

秒的速度还能接受，断断续续有人在做种，下完 2017.1 版本也用了好几天。下完后，我直

接在我的笔记本Windows 系统下安装了这个软件，花了整整一节课的时间，软件都装完了，

打开时却和VS 版本不兼容。这个软件需要一个低版本VS 的库，但是我已经安装了一个更

高版本的VS。上网搜搜博客，刚好也有解决方案，动手试了两个方案还是失败了，一狠心

卸载 VS，然而也并没有什么帮助，最后就只能转战 Linux。Vivado 在 Linux 下综合运行起

来比较快，但是其实在我后来的实验中用了台式机Windows 下装的Vivado，并没有感受到

太大的区别，因为项目本来就没多大。而且Windows 下可以自动安装驱动，Linux 下要让系

统识别实验板还得配权限（我的文档里面有写），很是麻烦。

由于之前我接触过的Linux 系统太少，基本上只用过Ubuntu 下的几个命令，只会用gedit

的人还能指望他会装软件吗？开始时我在 Windows 下装了一个虚拟机然后又装了一个

Ubuntu，没搞清楚需要配置多大的空间重复来重复去，就这样两周时间过去了软件还是没有

有安装好。第三次开会时只能照实交代没有安好软件，便出现了我们花了一个月都没把软件

安好的梗，也表明了今后我们进展的缓慢。原本定为第一个学期期末就能够把实验复现的目

标，硬生生到了第二个学期期末才算真正的搞定。好在后来还是把软件安装好了，也写了几

篇文档放到[仓库](https://oscourse-tsinghua.gitbooks.io/loongsoncsprj2017-manual/content/)里压箱底。


### 第五节 按时更新 Wiki

向老师在微信群里给我们发了一个清华大学 Wiki 的注册链接，里面有许多清华计算机

课程的资料，也专门开设了一个页面以维护参加比赛的资源和日记情况。也不知道自己在这

一年里为这个页面贡献多少资源和日记，只知道它硬生生把我从一个喜欢用图形编辑界面的

人变成一个习惯用文本方式编辑的人，因为网页的图像编辑界面实在不好用。

除了每两周一次的会议，向老师建议我们要把每次的进展情况更新到 Wiki 上面，至少

每周一次。对于不爱记录东西的多数人来说还是难以养成习惯，时时要老师提醒以后才会去

更新Wiki 上的日志。不过到最后实践证明定时更新Wiki，维护日志，写文档都是有好处的。

人的忘性实在太大，今天的我也许就忘了昨天开会时布置给我的任务是什么了，所以开会时

都得拿个小本子记录简明扼要地记录一下。还有之前做过的实验复现过程现在都已经忘记的

差不多了，好在再看一眼当时写下的文档就能轻松地再做一遍。如果当时没有形成文档，现

在估计又得重头来过，水过鸭背，什么也没留下。

### 第六节 clone 第一份代码

实验复现的代码都存储在GitHub 上面，刚开始时并不怎么会用，看着页面上众多的链

接，一会指向代码仓库，一会指向Wiki，让我搞得很混乱。向老师真是手把手告诉我，页面

里哪个链接里存放着哪些代码。然后让我回去下载复现。由于没有用过 git，我都是直接在

网页上点击下载zip 包，还会因为网速慢导致下载的代码不完整。直到后来被队友强烈安利

了一波才慢慢学着去使用 git。于是我第一步就是把清华第一届比赛的作品——[NaiveMIPS](https://github.com/z4yx/NaiveMIPS-HDL)

clone 下来。

### 第七节 尝试复现 CPU

复现 CPU 的实验并不困难，仅是将原本的项目下下来，用 Vivado 将工程文件打开即

可。由于一开始对于 NaiveMIPS 整个项目并不熟悉，下载下来的整个文件夹不仅有 Xilinx

的环境，还有Altera 的环境，目录十分复杂，让我连工程文件都没有找到。于是第一次的尝

试便是是自己新建一个工程，然后将源码一一添加进工程中去，然而这样是绝对行不通的，

因为NaiveMIPS 是用block design 连接各个模块，并用到很多的IP 核，所以直接加入源码

并不能综合。后来向老师又给我们介绍了龙芯的开源代码SoC\_up，同样能够运行操作系统。

这个项目的目录就简明易懂许多。于是我又转而尝试运行龙芯的开源CPU 代码SoC\_up，直

接打开工程文件就能够一路生成比特流，不会报bug，非常顺利。我一直在自己笔记本上的

虚拟机上运行Vivado，而Vivado 又是十分耗费内存的软件，一度导致系统运行到一半就会

崩溃的情况，至少每次综合实现过后尝试 open implementation design 都会显示 run out of

memory。

当龙芯的开源CPU 代码运行成功后，2017 年也随之告了一个段落。《自己动手写CPU》

书中也有一份开源代码——OpenMIPS，由于OpenMIPS 项目的开发环境是Altera 的实验板

和quartus，不能直接拿到Vivado 下运行，于是我便尝试着把源代码移植到Vivado 的项目之

中跑仿真，但是一开始便被 ROM 的使用情况给难住了。Vivado 中完全无法加入.data 格式

的文件，所以我便不知道怎么用自己编写文件的 Verilog 文件代替 ROM 仿真。直到很久之

后我才弄明白其实可以不把 data 文件加入到项目之中，直接在文件中使用 data 文件的绝对

路径就能够解决。为了解决Vivado 中使用ROM 的问题，我转而找到了Xilinx 的IP 核block

ram generator 来生成ROM，但是这个IP 核需要coe 这种专门格式的文件才能够初始化，当

时我却找不到生成这种文件的方法，只能暂时搁置下来。

### 第八节 消散的参赛队员

CPU 小组的工作任务是将SoC 综合下板。操作系统小组的任务是在实验板上运行操作

系统，开始时需要做ucore 的十个实验。编译器小组则是在操作系统上运行编译系统。可

能是其他小组的难度比较大，需要学习的东西多，几次会议下来，似乎每次只有CPU 小组

有些些进展。每次开会，向老师都要照例一一询问每个同学的进展情况，每个人都要自行

汇报个人进展，每两周一次的汇报着实吓退了不少人。向老师说话从来不拐弯抹角，做了

什么工作就是什么，没做就是没做，不需要找太多的说辞和借口。只是若每次过来开会都

说自己什么也没有做，怕是没有脸面继续参加下去，所以也是一种督促我们继续工作的极

佳方式。但是人的惰性是很强大的，大部分人课下都很难坚持着花时间持续地投入到这场

长期持久的比赛准备过程之中，即使一开始把每个人的工作任务都定了下来，也难以激励

大家按时完成任务，日志更无从写起，所以最后坚持到第一个学期期末还能来开会的就剩

下寥寥几人。

### 第九节 北理合伙人

第一次注意到江学谦是在第一学期的最后一次会议，来参加会议的人很少，气氛略显

尴尬，却又在意料之内。江学谦是操作系统组的人员，但是似乎当时他并没有明白自己需

要干什么？向老师听完我的进展汇报后，转头问江学谦。

向老师：你最近做了什么？

江：我最近在读Linux 的代码。

向老师：那你知道操作系统小组的工作任务是什么吗？

江：不太清楚。

向老师：你先打开GitHub 仓库里的链接页面，我来告诉你。

江：是那个链接页面？

向老师：（打开网页）你打算继续参加这个比赛吗？

江：本来我打算自己写一个文件管理系统或者搭建一个小型计算机，

刚好有这个比赛，我就参加了。

向老师：写文件系统是个大工程。但是和我们目前的任务不太吻合，

如果还想继续和我们一起做事参加比赛，就先按着我们的计划来进行。

江：好的。

刚听完江学谦的回答，我心想这哥们，都快一个学期了，怎么连我们在干嘛都还不知

道？这样真的能行吗？不过听着他说又是看Linux 源码，又是写文件系统的，估计是个深

藏不露的大神。后来我和同学聊起现在比赛的现状，提起他时，同学说江学谦缺少是个很

厉害的人。经过这次会议后，比赛的重担就交到了我们两个人手里，老师让我们多交流，

多合作，但是大家都不熟，各自做着各自的事，谁知道今后我们却展开了如此长久的一场

合作。

### 第十节 发现新大陆

大三上的期末考试过后，趁着离回家还有一段时间，我便窝在学校继续写大作业和做比

赛。有一天我在信教上自习时无意看到了龙芯第一届比赛的培训视频，大概就是介绍比赛形

式，讲解了一些基础知识，介绍实验板的使用方法。从培训视频中我发现比赛时有发布大赛

资源包，里面有很多的指导资料，比如实验箱的文档介绍，FPGA 的引脚，烧录 flash 的工

具，通过龙芯开源CPU 代码soc\_up 运行linux 的教程。后来费尽周折终于从清华大学参加

第一届比赛的学长那里找到了这个资源包。之后便像打通了任督二脉，对比赛形式有了更充

分的了解，终于在回家过年之前和江学谦一起用比赛发布的资源包运行起了 Linux 操作系

统。

## 第二章 漫长的赛前准备（下）

### 第一节 重新召集队员

新学期开始了，大三下又是事情堆积的一个学期，有好几门挺难的专业课，于是我量力

而行，把其他的比赛都推掉了，只留下这一个比赛还坚持准备。陆老师趁着学期开始，又找

了一些同学来参加比赛，加上原来的同学还能凑两个参赛队伍。第一次开会时我给所有同学

和老师们讲解了一下上学期我们的进展状况，然后让新加入的同学按照文档来复现我所走过

的实验过程。

### 第二节 再次复现实验

按照向老师的指导思想，寒假时通过资源包进行的实验复现，并非是他所期望的。因为

虽然 CPU 源码是自己编译的，但是操作系统和引导程序都是直接用编译好的映像文件，没

有移植的可能，其次基本不可能照着 SoC\_up 写一个 CPU，所以我们的任务便转向通过

NaiveMIPS 来复现实验，我负责CPU 部分的综合，江学谦负责引导程序和ucore 的编译。

开始时，我直接从GitHub 上面将NaiveMIPS 的源码下载下来，但是代码太多实在没有

办法看懂，加上是直接从网页上下载的 zip 包后再解压，所以第一次打开项目直接就报错，

提示我少文件，折腾了很久也没弄明白。然后向老师给我推荐了源码的作者，联系后才知道

是代码下少了。于是我又重新下了一遍，事情也没有那么简单，即使少文件的错误解决了，

但是项目同样综合不过去。

第二次开会时，向老师按照惯例问我们有什么问题，但是我真的不知道怎么描述遇到的

问题，只能说做不出来，项目动不了。因为向老师的研究方向和 CPU 设计并不契合，当时

我直接打开了 Vivado 中的项目，我们一干人等盯着屏幕看了很久，也无从下手。向老师还

是让我转变研究思路——尝试替换项目中的 IP 核。从局部做起，弄清楚每个 IP 核的用法。

后来从我自己实际搭建 SoC 的经验来看，发现这个方法也不太行的通，即使我能够把每个

IP 核的用法都弄懂，也还是很难了解整体的运行过程。但是转变方向的好处就是让我有了

一些缓冲的时间去了解SoC 的搭建过程，连接外围设备的连接和进一步加深对Vivado 的使

用。与此同时，南开大学的同学也一起加入了比赛的准备过程。

折腾到了 5 月份，向老师告诉我 NaiveMIPS 的作者已经修复好项目的问题，现在可以

重新运行，于是我终于赶在 5 月底完成了对于 NaiveMIPS 的复现工作，成功运行起[U-boot](https://github.com/z4yx/u-boot-naivemips)

和[ucore](https://github.com/z4yx/ucore-thumips/tree/for-NSCSCC)[。](https://github.com/z4yx/ucore-thumips/tree/for-NSCSCC)

### 第三节 报名参赛

在我尝试用IP 核搭建SoC 的同时，其他同学也各自分配到了自己的工作任务。让我觉

得奇怪的是，明明我写了很多的实验指导，如果单纯复现实验的话，应该没有什么难度。可

能大家都太忙了，对于硬件没有什么知识储备，而我们学习的课程对比赛的知识支撑帮助不

大，所以久而久之便对比赛丧失了信心，在对分配的工作无从下手时，就坚持不下去了。记

得原本开学的时候还能组两个队，可是到了五月份报名参赛时却只剩下4 个人，将将能组成

一个队伍，我给参赛队伍起了一个名字——BIT\_MIPS。原本在5 月13 号在湖南大学有一个

赛前的培训工作，但是那段时间我们忙于准备8 周结课的考试，就放弃了这次路途遥远的培

训，后来又在王娟老师的帮助下把几十个 G 的培训视频下载了下来，但是一直到了比赛结

束都没有看完。。。

### 第四节 一起移植软件

清华大学的 NaiveMIPS 虽然运行起来了，本以为能开始着手设计自己的 CPU，但准备

工作似乎并没有完全完成，向老师要求我们达到的目标是用 NaiveMIPS 运行清华的

Supervisor 监控程序，并结合 [Supervisor](https://github.com/z4yx/supervisor-mips32)[ ](https://github.com/z4yx/supervisor-mips32)[ ](https://github.com/z4yx/supervisor-mips32)来实现对于测试程序的自动化对比，以方便后期的

调试工作。于是我便转向和江学谦一起去研究软件方向了。

Supervisor，测试程序，ucore 这些运行在系统上面的程序都是 MIPS 汇编编写的软件。

刚开始时我看起MIPS 汇编都有些吃力，更不用说整个大的项目。这里面还涉及到编译链接

等各种内容，第一次看链接脚本，Makefile 文件时完全摸不着头脑，此时全靠江学谦一人

Carry 全场。我能做的就是把老师的要求和他讨论具体的实现方案，然后他来实现。这让我

想起有一次我的任务是用Verilog 来实现一个简单的SPI 到UART 的协议转换，可是我对协

议，时序等知识的认识仅停留在课本上的概念，并不知道怎么实现。江学谦给我讲了很多遍

我都没有弄明白，后来就差他没有手把手带着我写一遍，我才渐渐对协议实现有了一些浅显

认识，算是为CPU 设计打下一点基础。

回到软件的复现部分，CPU 虽然下载下来就能够运行，但是这些软件却不行，问题集中

在对本地交叉编译环境的配置和对硬件的适配上。Supervisor 本身并没有适配NaiveMIPS 的

版本，所以还得先看懂然后去适配硬件。江学谦很快就完成了与硬件的适配工作，但是用

Supervisor 来进行自动化对比却并不是 Supervisor 本身就带有的功能，所以得自行实现。我

和江学谦花了几个晚上的时间，讨论了很久，最后想出了实现的方式。虽然江学谦表示他能

够做出来，但是其工程量和所耗费的时间在当时却是不可接受的，拖到了6 月份最终只能放

弃Supervisor，转而想另外的自动化对比实现机制了。

在询问了NaivMIPS的作者之后，我才知道原来项目本身就自带自动化测试的对比程序，

一个直接用 SystemVerilog 实现的仿真 top 文件，可以作为仿真环境下测试的参考。除了仿

真环境下的测试，还要考虑到下板后的测试，在一次开会时我们找到了下板后的分析工具—

—ILA(逻辑分析仪)。其实就是Xilinx 的一个IP 核，但是在今后的调试工作中却帮了我们好

大的忙。就这样，我们运行了Supervisor，学习完ILA 的使用后，准备工作也算是做的差不

多了。6 月份将近过半，此时我们便放下手中的活计，专心准备期末考试了。

## 第三章 艰难的初赛设计计

### 第一节 蹭一蹭清华的小学期

大三下学期结束了，虽然比赛的准备工作历时两个学期，但其实正事一点都还开始。因

为8 月中旬就要提交初赛作品，所以其实只有1 个半月的时间让我们设计并实现参赛作品。

向老师索性邀请我们参加清华大学的小学期课程，和清华的同学做完实验后将结课作业作为

参赛的作品。这听起来是一个很好的机会，我们便欣然答应，而此时小组成员也只剩下三个

人。

7 月4 号，暑期小学期课程正式开始，每天早上9 点钟在清华大学三教开课，和我们一

起参加的还有南开大学的王同学。第一天，我们早早搭地铁又换乘小黄车到了清华。暑期的

清华门口人山人海，各地过来旅游的小学生团纷纷在校门口换上学位服，等着排队拍照。因

为游人过多，清华校门口的门卫会拦人，有证件才能出入，但是大多数时候只要背着书包长

得像个学生就基本能够蒙混过关。过了校门口的一关，没想到教学楼还有门禁，我们只能给

向老师打电话，然后让楼管给我们开门，费尽周折终于进到教室。第一天的课程是讲解课程

目标，但是课程自始至终没有具体教流水线的设计知识。这门课程作为清华的一个挑战性选

修课程，敢选课的人要么是真大佬，要么就是被迫选的，不过20 来人。然而不管怎样，清

华的同学在计算机组成原理实验已经做过一个16 位的 MIPS CPU，操作系统的实验课也都

做过 ucore 的 10 个实验，所以如果要上这门课简单的无非是把之前做过的大作业改一改就

行，但是老师们深知每个同学相应的水平，针对每个小组提出不一样的目标要求。

### 第二节 开始我们的设计

幸好我和江学谦两个人都自学了流水线设计的知识。去清华上课的前一天晚上，我心里

其实还没有一点底子，因为之前一直是纸上谈兵，没有设计 CPU 的实战经验。我们的作品

到底要用什么样的架构，什么样的设计？是照着 OpenMIPS 直接写一个，还是参照

NaiveMIPS 写一个？还是自己从头到尾设计一个？于是我找到江学谦和他商量应该按照什

么样的设计实现CPU，当时的他和我完全不同，表现出一副胸有成竹，跃跃欲试的样子。显

然我和他学习的路子不相同，讨论时听着他的设计方案总觉得比我的想法高出一个层次。原

本我只是想简单的参考OpenMIPS 的架构写一个CPU，江学谦告诉我那叫做Classical RISC

Pipeline。但是江学谦却提出了更多很好的想法，听完他的介绍，让我信心一下子提高了不

少，于是决定采用他的设计思路——FIFO 模式的流水线。我们确定了每个阶段的功能，接

口和时序，想要完全按照自己的设计打造一款作品。为了做好代码的管理，当天晚上我们就

在GitHub 上建了一个[仓库](https://github.com/bit-mips)管理项目代码。

小学期第一天早上的课程结束以后，向老师请我们在清芬园三层吃了一顿午饭，类似于

现在的北理工二食堂，连上陆老师和南开的同学，一共6 个人。大家心疼向老师的饭卡，不

好意思点太多，然后向老师开玩笑说我们吃那么少，像个小姑娘似的。吃饭时，向老师问我

觉得做实验最大的障碍是什么？我回答说是缺乏一个全局的观念，每次老师问我遇到什么问

题，我就只知道自己没做出来，但是不知道问题在哪里，又要去哪里寻求答案，连搜索引擎

都不知道要输入什么关键字。向老师听后十分感慨，其他同学也发表了一些个人看法。

下午的实验安排在东主楼四楼的组原机房，其实并没有什么人指导，无非是提供了场地

让我们做实验，大家各自为政。这时候因为时光昱还要补Verilog，流水线设计的基础知识，

并不能够投入到 CPU 的设计工作中。当时我也期望着他能够尽快跟上进度，实在不行还能

帮我们做做测试工作。我和江学谦则继续我们昨天的设计，进行各阶段接口的设计。一下午

的时间很快就过去了，加上早上的奔波，中午也没有能够休息，所以很快就觉得疲倦了，趁

着天色还早，我们便结束一天的工作，赶回北理工吃晚饭休息了。

### 第三节 转战 214

第二天早上是向老师的课，介绍操作系统，然而这个内容对于比赛来说没有什么帮助。

可能是我习惯了自学，遇到不懂的知识点再问的学习方式，要我上课听讲反而记不住什么东

西。下午我们又在组原机房继续设计CPU，但还是没能把接口设计完。我觉得如果接下来还

按照这样的进度，一共四周的实验课，第一周早上纯理论课，剩下的时间自由做实验，估计

第一周过去了还没能完成设计。

七月份的天气异常炎热，每天奔波来去，清华的基础设施对于外来人口又特别不友好，

各种限制，整个人都感觉不好了，于是我回去后就和向老师商量，希望不再过来清华做实验，

改成在北理工，然后还按时参加每周一早上的工作汇报。向老师尊重我们的意见，只是劝说

我们上一上理论课，我说想学的话可以看 Wiki 上的 ppt 和资料，向老师说现场听课的收益

会大一些，但是因为彼此的学习方式不同，他便不再说什么了。于是我们把阵地转移到了机

房214，空旷整洁的大实验室，还有可控温度的空调，重点是不用每天跑来跑去，可以把精

力更多的投入到比赛中。

### 第四节 失败的尝试

我们赶在小学期第三天将第一次 CPU 设计的接口、时序文档编写完毕，并且备份到

[GitHub](https://github.com/bit-mips/cpu/wiki)中去。剩下的工作便是将开始实现，事实证明我们还是太年轻，因为我们之前并未

实际写过一个CPU，没有经验可言，所以无法预见实际做的过程中会遇到什么样的障碍。当

我们两个人分着工，花了两天的时间，各自把每个阶段按照其功能和接口实现起来后，却发

现代码已经不在我们的掌控之内。首先我们在单独写完每个阶段以后，并没有办法对每个阶

段做相应的测试，其次如果直接将写好的各阶段简单粗暴的连接起来，完全不知道能否正常

工作，状态不可预知，即使出错了也很难查找。

商量过后，我决定将已有代码交给江学谦继续维护，而我则转变方向参考OpenMIPS 的

经典五级流水结构来实现流水线。在第一版 CPU 接口和时序设计的基础上，我花了一天时

间就大概确定了基础版本的流水线各阶段接口的设计，然后又花了一天时间就把一个流水线

建立了起来。这次实现设计的方法是先通过实现一条指令将各个阶段串联起来，建立起一个

初步的流水线，之后再在此基础上逐渐添加新的指令，添加完成后立马做测试，保证代码的

可控性。这时候时光昱便参考OpenMIPS 书上的测试用例来对流水线进行测试。

第一周的工作结束了，按照先前的约定，周一早上需要到清华进行实验进度的汇报。鉴

于第一周我们的失败，只能硬着头皮过去做展示，陆老师和王老师也陪着我们一同到清华听

报告。作报告时我事先并没有准备，所以自己都不知道自己在说什么，老师更是听懵了。总

结起来就是上周做了一个版本的CPU，发现做不出来，现在又推翻从头写起。这门课的任课

老师刘卫东老师建议我们不要操之过急，先把接口时序，冲突冒险关系都想好，文档的设计

必不可少，这也是对清华同学的基本要求。向老师说我们急于求成，觉得上个星期的理论课

对做实验没有什么用途就干脆不过来上课了。我们站在上面不知道怎么回答。会后我们又在

向老师的实验室里仔细地将第一次失败的作品设计说明了一次，王老师作为我们学校教这门

课的老师也听懂了我们的问题，然后提出一些建议，让我们干脆写一个多周期的CPU。当 时

我却不明白王老师所说的建议要怎么去实现，直到大四上小学期的时候，看到小学期的实验

资料时才明白原来我们对于 CPU 实现的理解并不是在同一个角度上，或者说是我入门的方

式比较奇特，才导致我和王老师的之间的沟通屡屡不畅，往后多次讨论意见都不统一，最后

还是江学谦听出来我们两个的矛盾点才解决了这一问题。

### 第五节 基础版本流水线新鲜出炉

第二周工作开始前，我们就按照自己的想法重新安排了工作内容和前中后期的目标。花

了五天的时间，我就把基础版本的 CPU 整个写的差不多了，不过此时实现的仅有大赛要求

的指令，基本上就是 MIPS1 指令集，去除中断异常后就很少了。时光昱照着《自己动手写

CPU》书中提供的用例做测试，检查出了不少的bug，都是大意导致的问题，比如变量名没

写对，数据宽度不对齐等。江学谦则继续在实现之前设计的FIFO 结构流水线，不过后期还

是难以测试，加之我这边把流水线搭建得差不多了，所以我们就彻底放弃了这个版本。最后

两天江学谦则负责搭建SoC 以运行Supervisor，实现串口功能和软件。最后一天我们便搭建

起一个能够正常综合，并在仿真环境下工作的SoC。但是此时出现了一个很大的问题，项目

综合完成后江学谦对我说发现综合出了很多的Latches，我一脸懵。

我：什么是Latches？

江：数电学过吗？

我：学过，但是忘得差不多了，项目有错吗？

江：没错。

我：没错就行，那就下板试试。

江：现在下板状态不可控，出现Latches 以后Vivado 就不能自动分析路径。

我：那这个东西是哪来的？

江：是你写的。

我：我没写啊。

江：你写的代码有问题，但是我现在也不确定哪里有问题，因为出现了几千个锁存器。

现在只有一个个改，或者把代码重构一遍。

我 ： 晕 。。。。。。。。。。。。。。。

我发现要想做好这个比赛，得懂的东西还真是不少。`Inferred Latches'，即「推断出的锁存

器」。Verilog 中的「寄存器」模型和计算模型与实际硬件中的锁存器(触发器，Flip-Flop)、

查找表(LUT)、存储器(RAM)等行为不完全一致，因此在综合设计时，综合程序会根据推

断规则以及Verilog 所描述的行为尝试使用硬件模仿出相同的行为，如在时序逻辑中使用的

「寄存器」会映射到FF，逻辑函数映射至LUT，「寄存器」数组往往映射至RAM。在

Verilog 中，采用`assign'语句或`always @\*'实现的组合逻辑一般为单稳态电路，用来实现逻

辑函数。逻辑函数是数学函数的一种，其输出仅仅取决于输入，内部不能记忆状态。需要

记忆状态时，必须采用多稳态电路，一般采用时序逻辑，综合时会用FF 实现。如果在设

计组合逻辑时不慎将某一个逻辑函数的输出通过其他逻辑函数接回至其输入，该组合电路

就可能成为多稳态电路（如直接按照触发器的接法连接多个逻辑门），内部可以记忆状态。

实际设计中，时序逻辑基本上可以实现所有需要记忆状态的功能，并且进行分析比较简

单，因此，对于此类电路综合工具会给出警告。除了多稳态电路，用组合逻辑还可以实现

无稳态电路。这种电路一般会构成不稳定的振荡电路，其输出频率受硬件和环境影响。若

设计中的某一个部分不幸错误形成这种电路，其行为难以预测，可能给调试带来较大的困

难。于是第二周的工作也只能就此收尾。

第三周周一的早上，我们照旧去参加报告。作报告时我们都是排在第二个，而第一个组

是清华做的最好的小组，每次的工作内容和进展都极为惊人，报告的内容得三四十分钟才能

够讲完，和之后我们三分钟的即兴发挥形成强烈对比反差，一度让我感到压力山大，怀疑人

生。参加完清华的报告，我又急匆匆赶去了夏令营报道，比赛中断了三天的时间，期间江学

谦自己一个人完成了对 CP0 的设计实现，而时光昱最终还是退出了比赛，等我回来时小组

就彻底只剩下两个人了。回来后，我们找到了之前犯错误的原因所在——由于我对于Verilog

的不熟悉，在使用if else，case 语句时会忘记写默认情况下的赋值，即赋值状态不完整，导

致综合后的电路在默认情况下就会出现锁存器锁存先前值的情况。按照江学谦的建议，我花

了两天的时间对代码进行了整体重构，通过 function 的形式写出每个功能部分，然后再用

assign 语句进行赋值，当整个比赛结束我回顾这一年来的工作时，我才发现这是我们做过的

最正确的选择，没有之一。

### 第六节 移植 Supervisor

要运行Supervisor，SoC 的一个很重要功能就是串口。由于一开始我们设计的流水线是

类SRAM 接口，所以并没有现成的UART IP 核可以使用，需要自行编写。在我看来这还是

挺难的一件事，然而江学谦三下五除二就做好了。运行Supervisor 还需要用到片上的存储资

源，所以还需要选择RAM IP 的类型，一开始我还认为block ram 的IP 核时序都是当前周期

给出地址，后一周期才会返回数据，（distributed ram 是用 LUT 实现的，当前周期即返回数

据）所以访存接口与OpenMIPS 并不相同，指令也直接返回至译码阶段，而不是取指和译码

间的流水锁存器，这也是我为自己埋下的一个大坑。

这是我们搭建的运行Supervisor 的SoC。记得我开始时说通过看《自己动手写CPU》来

学习怎么写流水线具有一定的局限性，比如对CPU 设计方式、MIPS 整体架构的认识狭隘。

到了这个阶段问题就暴露得一览无余了。对比我和江学谦两个人的学习方式，最大的不同是

他是通过看MIPS 的手册来了解MIPS 的设计原理，通过不同的途径也积累计算机系统的知

识。我在学习写 CPU 时，就只学习了每条指令的具体实现方式，所以认为 CPU 都是像

OpenMIPS 一样从指令ROM 里面取指令，从数据RAM 里面存取数据，即标准哈佛结构。

当时江学谦反问了我一个问题，如果你要实现Supervisor 里面的写一段程序到指定地址

然后执行的功能怎么办？如果 CPU 只能从 ROM 中取指令就意味着不能够改写程序，就实

现不了这个功能。我设计的SoC 思想完全只适用于嵌入式操作系统，所以指令ROM 必须改

用为双口的RAM，让CPU 能够从一个接口读取指令，另一个接口作为访存阶段写入新指令

的接口。此外各种的外部设备和存储器要统一的按照MIPS 规范进行地址映射。我在专业书

中不止一次的看到过一个概念——Address Space，但是我对于它的理解一直是DDR 一类的

内存，联系不到外设统一编址的概念，所以做地址映射MEMMAP 模块就更不会写了。因为

是自己写的串口，搭建完成 SoC 后就一直在调 UART 模块的 bug，好不容易终于下板让串

口输出了正确信息，但是Supervisor 的还是没能正常工作。

第二天去清华做完第三周的报告后，我们又接着昨天的工作继续调试Supervisor，最后

只有部分功能可以正常使用。江学谦没有心情继续调试Supervisor，因为他认为这个软件本

身还有许多问题，便转而写AXI Cache 接口的模块，而我为了在清华的结课报告上有些展示

的内容，便继续调试这个软件。

后来我花了一个早上的时间按照Supervisor 的出错功能编写了相应的测试文件，之后在

仿真环境下运行程序，成功定位到了软件的问题。后来发现其实是Supervisor 的源码出现问

题，而不是硬件的问题，为了赶比赛进度便放弃了本次调试，转而实现比赛要求的所有剩余

指令。

### 第七节 适配初赛框架

在我实现剩余指令的期间，江学谦抽空把 TLB 模块写完了，所以整个 CPU 最难的部

分，CP0 和 TLB 都是他写的，我基本上把这两个模块当成黑盒子直接用。实现完比赛要求

的指令后，我本来打算直接将 TLB 模块加入到流水线中，但是通过一早上的改动，我的心

态出现了一些问题。算起来，我们来来回回对流水线改动很多次，但是如今我们只有两个劳

动力，测试一直跟不上，我怕最后如果出现问题，都不知道该回退到哪个版本，有种差点就

要控制不住局面的感觉，所以我干脆停下继续做新功能的脚步，转而去适配龙芯发布的比赛

框架，并以此作为CPU 的测试用例。

比赛的框架很早就发布出来了，分为三个部分 SRAM 接口的功能测试，AXI 接口的功

能测试，AXI 接口的性能测试。我们最早适配的是SRAM 接口的功能测试框架，所谓适配，

就是将SoC 的CPU 部分换成我们自己写的CPU，外设和存储不需要自己动手搭建。虽然我

们的CPU 设计是类SRAM 接口，但是适配起来并不麻烦，一上午便能够开始综合下板。

功能测试框架一共89 个功能测试点，第一次运行时无论是仿真还是下板，都才运行了

几条指令就卡住不动，显然系统已经跑飞了。等着我们的就是艰难的调试环节，在这里真的

不得不夸奖江学谦调bug 的能力。记得在准备比赛的过程中，向老师早早就和我们提起过自

动化测试的问题，这个工作任务交到过至少三个人的手里面，但是他们都一一退出了，所以

我把这项工作称为——测试劝退。其实龙芯所给的框架里面就自带这一项功能，叫做 trace

机制，能够把错误的指令和地址信息打印出来，参赛的同学大部分都靠着这个功能完成了调

错，但是我们别树一帜，从头到尾愣是没用，完全靠着观察波形把bug 都找出来了。

江学谦找bug 的方式是这样的，首先将程序的运行方式看懂。程序每个部分的动作都在

脑海里面有个清楚的认识。测试框架程序会在数码管上显示当前已经测试的指令数和通过的

指令数，在仿真环境便以变量此作为观察程序是否仍正常运行的依据。当出现未通过的指令

时，则添加信号追踪出错的指令。通常错误不止一个，但是一个小问题往往在运行过程中就

会导致很大的错误，比如系统进入死循环，跳转至错误处理部分等，所以追踪时应该先确定

系统当前状态与预期效果最明显不一样的地方，然后一一回溯，这样便能找到最初导致错误

的地方，也就能够找到执行出错的测试用例，并以此为依据修正代码。

当时出现的错误真是花样百出，包括代码变量写错，在function 中使用全局变量，有符

号数和无符号数的判断等问题，多属于粗心写错，而不是设计上的问题。

记得有一次仿真和下板环境下运行出错的指令不在同一个地方，这就让我感到很困惑了。

只能分别在每种环境下单独调试，仿真环境下则观察波形，下板时则需要借助ILA 来查错。

因为当流水线接口采用类 SRAM 接口时，指令会在下一个时钟周期返回至译码阶段，但是

此时如果流水线出现暂停，block ram 并不会接收到暂停信号并保存此次数据，从而导致指

令和地址无法对齐。每次江学谦定位到了错误，我们便分析这个问题是谁导致的，谁写的谁

就负责修复。每次调试完一个bug，又重新开始运行，渐渐地数码管上通过的指令从刚开始

的个位数变成十几，二十几，三十几，直到最后全部通过。整个过程就像是一步步通关打怪，

不断的升级进阶，满满的成就感。到了第四周结束的时候，我们便能够通过全部的功能测试。

龙芯的测试用例真的很完善，从这以后一直到比赛结束，流水线已实现的指令代码便再也没

有出现过任何问题。

### 第八节 再见小学期

适配完 SRAM 接口的功能测试后，离清华小学期结课还剩下三天的时间，为了有个好

的成果展示，我建议江学谦和我再调试一次 Supervisor。于是我们又回到上次错误的地方，

花了一些时间找到Supervisor源码中的问题，终于赶在报告前一天运行起带中断的Supervisor。

虽然之后便再也没有用过这个程序，为此搭建的 SoC 如今也不见了踪迹，但是也算让我们

的报告展示显得没那么窘迫和寒酸。当时我打电话给向老师汇报进展，他说想给江学谦一点

锻炼表达能力的机会，让江学谦做结课的报告。第二天作报告的时候我按照规定介绍了流水

线部分的内容，因为流水线架构是按照我的设计进行，所以交由我讲，虽然只有一页ppt，

但是我讲的比江学谦所有ppt 加起来还要长，这就让人产生了一种江学谦讲不下去了所以然

后我才接着讲的错觉。

总结在清华上小学期的这段经历，虽然表面上对于我们做比赛并没有知识层面上的促进

作用，也没有达到和清华同学相互交流学习的目的，但是却以另一种形式促进了我们的比赛，

给出了一个时间上面的规划。每周的定时汇报也让我们能够及时审视自己的进展，比如通过

第一周的失败快速迭代作品，更关键的是受到一群优秀同龄人的撼动，知道别人可以优秀到

什么地步，才不会轻易的自我满足。

### 第九节 错综复杂的 AXI

课程结束后，我们便全身心投入到初赛的工作任务，适配 AXI 版本的功能测试和性能

测试。由于设计的作品是类 SRAM 接口，需要写一个转换桥将接口转换为 AXI。起初这项

工作交由江学谦完成。此时遇到的最大障碍就是流水线的暂停问题解决不好。设计按照

OpenMIPS 使用统一的ctrl 模块控制流水线的暂停，但是这样的解决方案被江学谦诟病了很

多次，终于在取指和访存阶段间的暂停请求互锁问题出现后，让我决定重构流水线的暂停控

制模块，将每个阶段所发出的暂停请求集中到一条总线上，然后将暂停信号引入转换桥。在

重构的时候，两个人都进入了一种疲倦状态，在我们设计把信号分离出来后，脑子就一团混

乱，既不知道如何修改流水线，也不知道该将哪些信号组合起来作为转换桥的输入。我试着

拿起马克笔在白板上引导要讨论的内容，但是两个人都默不出声，像是经历了长途的跋涉后

再也迈不出去的大腿。虽然剩下的工作就只剩下类SRAM 转换为AXI 接口的实现，但却觉

得像一道巨大的鸿沟阻碍着我们继续前进，又无法跨越。能够做出来就有性能分数，做不出

来就没性能分数，决赛也无从谈起。况且整个Xilinx 体系的IP 核基本都是AXI 接口，要搭

建SoC 更绕不开AXI 协议。后来王老师过来和我们讨论了许久，期间还和向老师通了一个

电话会议，但是似乎他们没有弄懂当前迫在眉睫需要解决的问题是什么。按照老师的建议，

我还是写下了几条准则作为实现转换桥的标准。

由于写转换桥的工作一直交予江学谦，我对 AXI 协议的理解并不深刻，只能在旁边干

着急。后来迫不得已便转换思路，虽然直接复用 NaiveMIPS 的代码并不实际，但是我可以

参照NaiveMIPS 将类SRAM 接口先转换为AHB 接口，之后再通过IP 核转换为AXI 接口。

AHB 协议比AXI 协议涉及到的信号量少，花了一下午时间我便把状态机和时序都设计完成

了。虽然绕了很大弯子，还是把类SRAM 转换成了AXI 接口。在我刚刚实现完成转换模块

后，便看到龙芯在比赛官网里发布了直接将类SRAM 转换为AXI 的转换桥，敢情费了那么

大劲儿，全给白费了。我还是珍惜自己的劳动成果，硬要拿自己写的模块先把类 SRAM 转

换成AHB 接口，然后再通过IP 核转换成AXI。适配完AXI 功能测试SoC 框架后，又出现

了一个问题，因为框架的AXI 协议版本和IP 核不一致，通过AXI 版本转换IP 核后，我的

转换桥模块便不能正常工作。调试了半天，发现问题出现在 IP 核上，没有办法做改动。此

时，我又不得不转换方向，直接用比赛提供的类SRAM 转AXI 模块实现转换，放弃原先写

过的转AHB 模块代码。

当我真正开始看龙芯的开源转换模块代码时又愣住了，因为我原先理解的类 SRAM 接

口与龙芯的模块中提到的实际并不是一回事。龙芯的转接桥里提到的类 SRAM 接口是指在

SRAM 接口的基础上添加握手信号实现同步，而我在流水线里面写的类 SRAM 接口只是与

SRAM 接口的时序不相同。因此，为了减少对于流水线的改动，我就不得不先把流水线的接

口改回SRAM 接口。

经过如此多的周折，我才摸清了设计的门道，才知道在选择时什么时候要选 SRAM 接

口，什么时候要做类 SRAM 接口，怎么走会带来什么样的后果，产生什么样的影响，这些

都是自己去尝试过一遍以后才能够积累下来的经验。因此，我对取指访存的时序做了更改，

指令将直接返回取值和译码阶段间的流水锁存器。当初辛苦想出来的解决暂停信号导致指令

地址不对齐问题的机制都可以去掉了，而原本设计在执行阶段发出访存请求，也调整到了访

存阶段。幸好AHB 和类SRAM 也有些相似，于是我在原本AHB 模块的代码基础上做出一点

改动，就实现了为 SRAM 添加握手信号，转换为类SRAM 接口的功能。这一次运气很好，

AXI 接口功能实现后，再也没有出设计上的问题，顺利的适配了AXI 功能测试与性能测试框

架。

### 第十节 难以提高的性能

初赛提交截至前的一周左右，我们便把性能测试运行了一遍。第一次跑完性能测试时看

到仅有可怜的0.9 几分（与龙芯ls232 比较的性能倍数），那时我们俩眼角一斜，觉得这性能

差的出奇。然后趁着还有时间，我们便想要着手提高性能，主要从提高主频和加入Cache 两

个方面入手。一开始我们的主频只有50Mhz，于是我们干脆把pll 输出时钟调整至100Mhz，

Vivado 综合分析后出现了负数的wns，还记得我在写第一版CPU 的时候综合出现的锁存器

吗?如果有这些锁存器存在，Vivado 便无法自行分析出哪些路径是过长超时而无法正常运行

的。通过江学谦的分析，我们看到了Vivado 综合过后的电路图，找出了限制频率的最长组

合路径，发现这是一条从译码阶段延申到访存阶段又返回至取指阶段的路径，我们惊讶于为

什么Vivado 会综合处那么长的一条路径，几乎贯穿了五级的流水，最后发现居然是对于转

移指令的实现与数据前推导致的问题。首先我们会在译码阶段取操作数，涉及到数据相关，

采用数据前推的方式解决，然后执行和访存阶段的数据便会前推至译码阶段，为了避免转移

指令跳转时对指令的浪费，把转移指令的实现放至译码阶段处理，这样有好处，就是方便，

无需做转预测。但是到了后期，便会出现转移指令在执行时，首先要等待执行和访存阶段的

前推的数据作为是否转移的判断条件，最后再把跳转的地址送至取指阶段的超长路径。由于

各阶段联系得十分紧密，无法做出大的改动，只能做些小改动把主频提升到80Mhz 就已经

到达极限了，和其他学校的100Mhz 以上的主频完全无法媲美。其次是增加Cache，江学谦

尝试直接写AXI接口的指令和数据Cache，当时我问他能不能看懂NaveMIPS然后照搬Cache

过来用呢？江学谦表示不行，因为Cache 需要保证数据完整性。两个Cache 如何保证同步，

如何安排暂停信号避免死锁，如何在另一个Cache 从内存读取旧数据前更新内存。如果通过

软件解决这些问题，那么就要考虑Cache 要以怎样的接口接入流水线，访存指令是否需要增

加等待。我虽然不理解，但是后来我尝试着按我的想法直接移植过来使用时，还是发现我想

的太简单，因为接口时序并不一致，而且涉及到指令和数据Cache 的同步问题，还要看懂他

的实现，然后在我的流水线上增加相应功能才有可能复用。尝试了很久，Cache 想做很简单，

但是很难做好。如果做不好不如直接用IP 核，至少不会出现Bug。Cache 中包含大量的存储

单元，如果用FF 实现，仅16KB 就需要128K 个 FF；若采用Distributed RAM，一个LUT

能存储64b，16KB 需要2K 个，所有的端口都必须连上，能不能成功布线？怎么布线不影响

性能？NaiveMIPS 中就出现这个问题，容量加大后布线失败；Block RAM 差不多是实现高

性能 Cache 的唯一选择。GitHub 上的 Cache 很多，但搜索结果前三页上的实现没有一个综

合出Block RAM，还有不少连Distributed RAM 都用不到。我们几次都在Cache 这个领域败

下阵来，这也意味着直接做AXI 接口对我们来说已经不可能了。之后我们找到一个Xilinx IP

核 System Cache 作为系统的Cache 使用。经过这样的提升后才把性能分数提高到了5.9 几

分。当我看到第一届比赛的性能分数最高分还不到3 分时，我觉得还有希望。

### 第十一节 提交初赛作品

这中间还有一个小插曲，Vivado 这个软件是相当耗内存的，起初一直是用我自己的笔

记本电脑就能够综合跑完功能测试，但是当我们加入Cache 之后，笔记本的内存就承受不

了性能测试的仿真了。于是我找到了王老师，申请使用学校的服务器，谁知道学校却没有

能够跑硬件的服务器，只能从机房抱了一台配置比较好的台式机到214 使用。这台电脑只

有8G 的内存，跑起来还是崩溃了。后来王老师又给我们介绍了一位电脑配置了30G 内存

的研究生学长，于是我们把项目交给了学长，让他帮忙跑一下测试。第二天早上我本以为

可以运行完，谁知学长才把功能测试运行完，正准备跑性能测试。我只能耐心等待，下午

我去到214 的时候，江学谦告诉我他已经解决Vivado 运行崩溃的问题，我问他是怎么做到

的，他说花了一早上写了一个程序，调用系统函数限制Vivado 的内存使用，始终给系统留

下一部分内存做调度。等我们到下午跑完整个性能测试的时候，研究生学长那边才刚跑完

了一半性能测试。

到这里，我们便完成了初赛作品的设计，小心地按照规定打包，然后在不同的机器上

测试了好几回，最后还提前了几天提交，剩下的便是等待初赛结果和决赛通知。

## 第四章 迷离曲折的决赛设计计

### 第一节 ucore 还是 Linux

老师们看到我们的成果都感到很开心，于是便趁着时机召开一次会议总结成果和做后

期的工作安排，我们也表示有信心能够进入决赛。按照比赛的组织形式，决赛需要拿出一

定的展示，可以从提高性能和搭建系统两个方面入手。按照向老师当初的目标，希望我们

能够继续搭建系统以运行操作系统。江学谦终于可以回归自己的老本行了。

我一直对操作系统的内容不是很了解，所以此时江学谦说什么就是什么。当时向老师

让我们移植ucore，但是江学谦并不中意ucore 的代码风格，认为改动起来不是一件容易

事，然后便主张直接移植Linux 内核。

向老师：如果ucore 都移植不起来，那么Linux 就更不用想了，应该有个循序渐进的

过程。

江：其实ucore 改起来就只需要改一改串口地址

向老师（疑惑脸）：为什么？（有那么简单吗）

江：其实移植Linux 也是移，移植ucore 也是移。

我：嗯，就是下板如果真的有问题，那么我觉得调试的手段也是一样的，倒不如直接

上手Linux。

但是当时我也有些担忧，以我们CPU 的性能，移植Linux 内核会不会太冒险。江学谦

安慰我说以这样的性能运行Linux 足够了。我问他移植ucore 真的只需要改代码里的串口

地址就行？他说是的，但是要真正下板还得和硬件做适配，这才是麻烦的事情，所以我不

想弄。既然如此，老师们也就不再多说什么，任由我们继续尝试了。

### 第二节 赶上暑假的小尾巴

初赛完成后，离开学只剩下一周的时间，向老师怕我们时间紧张，所以一直催我们尽

快开始搭建系统做移植工作。但是我刚好需要和同学去广州比赛，所以便借此休息了一个

星期的时间。期间，组委会公布了初赛的成绩。我们能够如愿进入决赛是我意想之内的

事，但是今年的参赛队伍如此强劲却是我意想之外的事。

比赛回来时同学们都已经开始了小学期的课程。大四上学期的小学期刚好就是写CPU

的实验课。王老师担任这门的任课老师，便让我俩继续进行此次比赛的设计，作为自主实

践课程的任务同其他同学一起参加小学期的课程，也省去了一些不必要的重复工作。

### 第三节 改动流水线

江学谦的任务是移植操作系统，我的任务是对流水线做出相应改动。要移植操作系

统，首先是增加TLB 模块，包括实现TLB 指令，用TLB 做地址转换。其次是搭建SoC，

难点在于各种外设控制器。TLB 模块江学谦很早以前就完成了，只是我一直没有把这个模

块加入到流水线中去，因为怕增加以后影响主频，性能有所下降。一早上时间，我便增加

了需要用到的几条TLB 访问指令，但是如何将TLB 加入流水线做地址转换却让我没有了

头绪。江学谦给我讲明白TLB 模块的用法后，我对流水线的接口进行了一系列改动，修改

部分的粒度非常大，尤其是访存接口与原来已经完全不同，TLB 将代替原来的流水线访存

接口与转接桥模块进行连接。其次是新添加的指令会修改原有异常类型，并带来新的异常

情况，最后还有转接桥的地址，Cache 属性也得做出改动。

增加完TLB 访问指令，还需实现非对齐的访存指令，为此也修改了转换桥和龙芯开源

代码中的字节使能端口。非对齐访存的指令实现起来比较困难，光是想明白字节使能信号

的值就费了很大的劲，既要考虑大端小端，也要考虑左对齐右对齐，截高位截低位的问

题，查了一早上手册才彻底把指令的功能弄清楚。

修改过后，江学谦编写了一段小程序对改动模块进行测试（会写测试程序很重要，反

正我不会）。但是TLB 模块还是出现了问题，在于我把旧的由流水线提供的访存使能信号

和新的由TLB 提供的访存使能信号混淆，而且TLB 会引起异常的情况也没有考虑完整。

总之又调整了两天，这部分内容才真正开始工作，实现过程比我们想象中的要麻烦很多。

|                                 |
| ------------------------------  |
| 2018\.8.28 尝试添加tlb 访问指令   |
| 1\. 添加TLB 指令                  |
| 1\.1 在id 阶段识别tlb 指令，不至于发出无效指令异常 |
| 1\.2 在ex 阶段识别是tlb 指令，然后通过cmd 操作发送至CP0 |
| 通过函数get\_cmdvalid 判断mtc0、mfc0 以及tlb 指令然后使访问有效 |
| 通过函数get\_cmdop 给出访问操作 |
| cmd\_no、cmd\_sel、cmd\_data 暂且保存为mtc0 和mfc0 的赋值 |
| 1\.3 在mem 阶段接收CP0 的反馈，判断tlb 是否触发异常 |
| 更改了mfc0 写入寄存器值的判断情况 |
| 通过函数get\_exrvalid 得到异常有效信息主要有tlbwi、tlbwr、访存不对齐 |
| 通过函数get\_exrtype 得到异常类型 |
| 2\. 添加tlb 至流水线，实现访存地址转换 |
| 2\.1 例化全部CP0 接口，添加bit\_mips 中tlb 与外界接口，原接口保持不变 |
| 2\.2 IF 阶段增加tlb\_miss 、tlb\_v、tlb\_kern、iskernel 接口。判断是否引发异常 |
| 首先通过函数get\_exr\_valid 判断是否产生了异常 |
| 通过函数get\_exrtype 判断异常类型 |
| 同时更改发出访存信号的时序逻辑，其访存信号与exrvalid 相关联 |
| 2\.3 ctrl 模块加入!tlbi\_ready 的暂停信号和!tlbd\_ready 的暂停信号 |
| 2\.4 mem 阶段增加tlb\_miss 、tlb\_v、tlb\_d、tlb\_kern 接口 |
| 2\.5 更改get\_exrvalid 函数，加入tlb 异常的判断 |
| 更改get\_exrtype 函数，加入get\_exra0 函数 |
| 3\. 更改类sram 接口，添加cache 接口，其赋值规律同addr |
| 4\. 更改axi 转换口， 添加cache 接口， 更改其axi\_cache 属性 |
| 5\. debug id 阶段识别tlb 指令时func 的宏定义出错 |
| 6\. 修改转接桥中的byteenble 选项 |
| 6\.1 在dbus\_sramlike 中增加byteenable 的输出接口，直接将输入的值赋给输出 |
| 6\.2 在axi 转接桥中增加输入byteenable 的输入接口，将其值赋给axi\_strb |
| 7\. 增加lwl，lwr |
| 7\.1 id 阶段识别lwl, lwr，因为读取的是rs、rt 寄存器的值，所以不需要特意更改 |
| 7\.2 ex 阶段将rt value 赋给需要写回的寄存器的值 |
| 7\.3 mem 阶段get\_mem\_read 函数需要加入lwl lwr |
| get\_mem\_byteenable 需要加入lwl lwr |
| 7\.4 mem 阶段修改get\_extend\_data 加入参数write\_data 为原先寄存器的值对于lwl 和lwr 直接用byteenable、读取内存的值、原寄存器的值来计算extend\_data |
| 8\. 增加swl, swr |
| 8\.1 id 识别swl swr |
| 8\.2 ex 修改mem\_wdata 函数加入swl swlr 需要写入内存的数据同sw |
| 8\.3 mem 修改get\_mem\_byteenable 同lwl lwr |
| 9\. 调试bugs，对于查询tlb 指令，判断其异常类型的方式若发出read 或者write 指令，则开始查询tlb，此时需要等待tlb返回的tlb\_miss tlb\_v tlb\_kern 等等参数。根据情况判断，但前提是发出了read 或者write 信号 |
| 10\. 修改TLB 查找结果，若查到完成则复位查找寄存器 |
| 11\. 修改cpu\_axi 转换桥 araddr 和awaddr 地址应该直接赋为do\_addr，不能直接将输入的地址给他，否则地址只能保持一个时钟周期 |
| 2018\.8.30 |
| 1 修改ibus\_read dbus\_read dbus\_write 会受到异常影响的情况，因为这些信号并不是真正意义上直接用来访存的信号，故其应该只受到地址错误的影响，即此时不去查tlb |
| 1\.1 if 阶段修改时序逻辑里面的s\_ibus\_read 值的判断条件，仅当地址不对齐时不应该去查tlb |
| 1\.2 mem 阶段mem\_read mem\_write 影响其的判断条件为input\_exr\_valid || is\_AdEL || is\_AdES ，即之前若产生异常或者此时地址错误，则不再查询tlb |
| 2 tlb 指令会产生stall，故需要将CP0 的stall 请求接入ctrl 模块 |
| 修改tlb 异常的判断情况，tlb\_v 应该等到tlb\_ready 给出时再判断，所以将tlb\_ready 传入if 和mem 阶段，作为判断异常条件之一 |
| 3 修改mem 阶段查询tlb 的时候其暂停信号应该为mem\_stall\_req，让整个流水线暂停 |
| 4 原设计中mem 阶段的类sram 未做异常的应对，原先真正发出访存信号的组合逻辑并未加入异常判断。|
| 增加exr\_valid 到发出访存信号的组合逻辑模块中作为判断条件之一 |


表格中是对流水线改动的日志。我习惯了把这些改动记录下来，因为这样有助于查

错，如果出了bug，可以一个个核对，知道自己对哪些部分做出哪些改动，否则真的有可

能出现最后查不出bug，然后只能直接把这段新增的功能全部去掉的情况。

### 第四节 搭建新的 SoC

流水线改动完成后，江学谦只完成了内核态Linux 的移植，能够在qemu 中运行到一

定的状态。我让他先放下这个工作，帮忙搭建新的SoC 一运行操作系统。首先我们决定采

用从flash 处启动系统的启动方式，于是江学谦便自己写了一个flash 控制器模块。

我：为什么不用现成的IP 核。

江：现成的IP 核找不到可以直接读flash 的。

我：我看NaiveMIPS 的SoC 里面有flash 控制器的IP。

江：能找到的都是需要执行一段程序来读写flash，这样就需要先执行引导程序，但

是我们的引导程序本身就是要放在flash 中，所以需要直接读写flash 控制器，

将flash 映射到地址空间，让CPU 可以像读内存一样直接读flash。

我：哦哦（虽然不太懂，但是觉得好厉害的样子）

添加完flash 控制器，就到了DDR 控制器。原本我们都以为只要参考NaiveMIPS，配

置好IP 核的参数就能够使用，但事实并非如此。江学谦在开学前一周里看过NaiveMIPS

的参数配置，发现其实不太对，但竟然也正常工作了，于是他拿出一本Samsung DDR 的手

册让我照着配置。配完参数后，其实我们也不知道是不是正确的，因为可以找到的参考文

档不全。其次还有外部引脚和时序需要连接，这部分也没有任何参考，因为每个SoC 的设

计不同。生成DDR 控制器的IP 核叫做MIG(memory interface generator)，有内部时钟，外

部时钟，自己生成的时钟等等各种时钟，因为文档不全所以不知道这些时钟的具体作用，

最后还是通过参考已有的设计才慢慢摸索出这些信号的意义。

UART 直接用的IP 核，是最简单的外设，直接连上AXI 接口就能使用。我们暂时只

需要那么多功能，搭建完成后，第一步是测试flash 控制器。毕竟是自己写的程序，本身还

是存在有许多bug。刚开始时发现flash 控制器不起作用，一点反应都没有，但是复查了很

多遍代码，还是没能发现问题。江学谦怀疑是不是实验板上面的flash 本身出现了问题，于

是我们拿起实验室里示波器，直接从flash 的物理引脚采集信号，在我举了一早上的示波器

探针后，终于发现是因为对于SPI flash 引脚DI 、DO 理解反了导致的问题，于是通过调

整引脚，终于看到了从flash 中读出的数据。后来又陆续找到了字节序错误和寄存器忘记清

零的bug 后才算真正能把flash 控制器用起来。

接着开始测试DDR 控制器，还是通过自己写的程序来测试（临时起意写的，当时忘

了整理，现在不见了），但是DDR 并没有正常工作。就在这时，向老师给我发微信，问我

能不能在决赛前一个星期，也就是9 月13 号做一遍展示。经过两天不断的调试打击，我实

在没有信心预测10 天以内能不能把系统搭建好，所以只能回复说不可预知，如果有好的结

果的会及时通报。

继续调试DDR 时，我们发现MIG IP 核有一个Init\_calibre\_done 的信号，便猜测启动

过程需要初始化，启动完成后会输出相应信号，观察ILA 波形后我们发现MIG 确实有输

出这个信号，说明DDR 正常启动并初始化了。开始时我们并没有注意到初始化这个问

题，估计程序都已经执行完了，DDR 还没有启动起来，所以必然不能正常访存。后来我们

将MIG IP 核输出的初始化完成信号连接至系统的reset，然后DDR 启动起来后再撤销对系

统reset 就解决了这个问题。DDR 控制器正常工作后，整个SoC 系统也就搭建完毕。

### 第六节 被性能耽误的 Linux

系统搭建完成后，江学谦立马写了一个引导程序，把移植了一半的Linux 一起烧录到

flash 中，想看看Linux 是否能够运行到qemu 中运行到的状态，以此作为系统的一个测

试。此时我们用上了官方提供的flash 烧录工具，非常的好用，所有就干脆把烧录flash 的

bit 流固化到实验板上。Linux 的启动信息迟迟没有从串口显示出来，于是我们查看ILA 抓

取到的信息，才发现系统如今还在执行引导程序。于是，我们把实验板放在桌上，趁着系

统加载的时间出去吃晚饭，希望回来时能够看到Linux 运行启动的信息，然后就结束今天

的工作回去休息。回来时系统如愿启动到在qemu 中运行的状态，但是结局却出乎我们的

想象，因为整个过程维持了将近半个小时，也就是仅把Linux 加载至内存中就花了半个小

时。在qemu 中运行整个程序不过是几秒钟的事，然后江学谦又在引导程序中加入了测试

信息，计算了一下实际的加载速度。添加完TLB 和外设后，如今系统的效率低得超乎想

象，我们不知道是怎么回事，系统能够正常工作，但是效率很低，而且Cache 好像并不起

作用，当时我们没有再深究下去，觉得就是流水线的设计问题。按照这样的情况，即使再

花时间去移植Linux，也很可能会因为Linux 本身的时钟中断处理程序就耗尽所有系统资

源，导致Linux 崩溃。所以此时我们就不得不放弃继续移植Linux 这一条路。

### 第七节 兜兜转转原地转圈

我：既然移植Linux 不行，那么不如还是退步回去移植ucore 吧？

江：但是ucore 本身也有时钟中断处理，需要的性能也不低。你这个估计只能跑

嵌入式操作系统了。

我：（我这个？）好吧，那你打算怎么做。

江：移植嵌入式系统很容易，可以不急，所以我还是先来改善系统的性能。

于是，江学谦便重新回到设计Cache 的道路，这是目前唯一不用改动流水线而提高性

能的方法。我没有意见，但是表示我对实现Cache 帮不上忙。

趁着这段时间，我曾想试着移植ucore，但是当我拿着这份代码，却不知道该如何下

手。后来我硬着头皮，改动了串口地址，改了Makefile 中的编译目标指令集，编译完准备

下板时。江学谦告诉我还是先在qemu 中调试后再下板，于是他又把静态编译好的qemu 拷

给我，让我配合gdb 调试。但是我真的不太会用，看着我手残的样子，江学谦又放下手中

的活计，帮我调ucore，找到了一个像是引导程序和操作系统的代码覆盖问题。就和我们当

初想的一样，调试ucore 很复杂，所以我们两个都放弃挣扎了。

此时我们的目标是如果江学谦能够把Cache 写出来，提高系统性能，那么我们就继续

跑Linux，不然就跑嵌入式操作系统，总之要有一个可以展示的作品。那段时间压力很

大，时间又紧迫，感觉整个项目又脱离了自己的掌控，到处乱串，最后能否做出来得靠运

气。陆老师和王老师来到实验室看我们的进展情况，我们也如实说了如今所面临的问题。

老师们给了我们很多鼓励，让我们放宽心，毕竟是第一次比赛，能够有这样的成果已经实

属不易。后来陆老师和向老师说起我们的情况，向老师听后希望我们去清华给他展示一

遍，因为他觉得可能是我们的硬件上出现了一定的问题，才导致操作系统没有启动起来。

但是我还是打电话告诉他是性能太差的原因。当然硬件上也还有问题，但是我们还远没有

到达那一步，如今在可预见的范围内都知道即使移植过去也不会有好的效果。当说起我们

可能只能运行一个嵌入式操作系统的时候，向老师还是感到一些失望。

### 第八节 柳暗花明又一村

江学谦着手设计Cache 时，我闲着没事做，便试着把《自己动手写CPU》书里面介绍

的ucos-II 移植到我们的系统中来。嵌入式系统移植起来工作量并不算多，主要是中断这部

分需要做出修改，但是后来我发现如果要复用一部分已经移植好的ucos-II 的代码，则需要

把指令集拓展成MIPS32 R1 指令集。和江学谦商量过后，他表示很赞成我的想法，因为如

今可以借鉴到的移植到MIPS 上的操作系统基本上都是MIPS32 指令集。当初按照比赛的

要求，只做了MIPS 1 的指令集，所以移植操作系统就比较麻烦，如果实现的是MIPS32 指

令集，至少移植ucore 就会变得简单许多。

于是我又花了一天时间将剩下的MIPS32 指令补全，也是因为这次机会，我形成了一

套添加指令的流程规范，为后来决赛实现自定义指令剩下不少时间。

```
2018.9.5

1. 实现TEQ 指令
1.1 defines.h 增加teq
1.2 id 阶段判断为有效指令
1.3 EX 阶段识别并发出异常

2018.9.7
实现指令集拓展，为mips r1
1. sync、pref 指令不做实现
2. 实现移动操作指令movn、movz
2.1 define.h 加入指令码
2.2 ID 阶段识别指令,special 类的wreg
2.3 EXE 阶段将rs 的值赋给wdata，根据rs 的值改变wreg
3. 实现clo、clz
3.1 define.h 加入指令码
3.2 ID 识别指令，给出wreg
3.3 EXE 阶段计算rs_value 相应01 的个数，方法同openmips
4. 实现mul
4.1 define.h 加入指令码
4.2 ID 识别指令，special2 类的wreg
4.3 EXE 阶段计算乘法结果，将乘法结果作为get_wdata 函数的输入，低32位wdata
5. 实现乘累加、乘累减
5.1define.h 加入指令码
5.2 ID 阶段识别指令
5.3 EXE 阶段，修改读取hilo 模块，每次均需读出hilo 的数据，接收hilo 数据接口宽度变为64 位
5.4 EXE 阶段新增get_r_hilo 函数给出是否要读hilo
5.5 EXE 阶段为mfhi, mflo 准备的变量以及解决数据相关的hilo\_data 不变，给其赋值的函数中将变量input_hilo_data 的宽度改变
5.6 EXE 阶段get_mul_result 函数增加input_hilo_data 参数，并为乘累加累减计算
5.7 EXE 阶段get_w_hilo 需要给出写入hilo 地址
5.8 EXE 阶段get_hilo_wdata 给出写入hilo 的数据
5.9 hilo 模块修改读取方式，每次均把hilo 同时读出
5.10 修改bit_mips.v top 模块的连线和接口名
6. ll 当作lb、sc 当作sb，暂时不做LLbit
6.1 define.h 加入指令码
6.2 ID 阶段识别指令,ll 需要给出get_wreg
6.3 EX 阶段ll 需要计入is\_load，sc 需要给出mem_wdata
6.4 MEM 阶段get_memread 计入ll, get_memwrite 计入sc, get_membyteenbale 计入llsc，get_extendeddata 计入ll
7. 修改load 相关和mfcp0 相关，判断其写入的地址与需要读的地址是否相关
8.实现不包含立即数的trap 指令
8.1 define.h 加入指令码
8.2 ID 阶段识别指令
8.3 EXE 阶段加入get_trap 函数判断是否满足trap 要求
9. 实现包含立即数的trap 指令
9.1 define.h 加入指令码
9.2 ID 阶段识别指令,符号拓展立即数
9.3 EXE 阶段get_trap 函数判断是否满足trap 要求
```

添加完新的指令后，我又用修改过的流水线代码适配龙芯的功能测试和性能测试框

架。此时功能测试下板后出现了原先没有遇到过的问题，对于不同的延时，系统通过的指

令条数竟然不一样，而且对于同样的外部激励，其结果也不一样。这时我有些慌了神，因

为我新添加的指令并不会影响到原有的指令，那么问题会不会出现在TLB 模块？江学谦一

口否认了TLB 出错的可能，因为下板后对于同样的激励，就算有错，那也是同样的结果，

为什么会出现不一样的结果？应该是流水线时钟约束没有弄对导致的，于是我们把矛头指

向时钟，通过查看implementation 后的结果，却没有发现任何时钟上的问题。

对于江学谦提出的这种猜想，我不知道该如何验证，又如何解决，因为当时在仿真环

境下功能测试是全部通过的。第二天，想不出办法的我只能抱着试试的心态，把比赛提供

的调错方法环节都走一遍，要是真的调不出来，就只能把初赛提交的作品再提交一次，反

正即使没有TLB，没有MIPS32 的指令，一个嵌入式操作系统也还是能够跑起来，当时的

要求就是降的那么低。按照比赛提供的方法，我将仿真参数调整为与下板环境下相同的延

时，然后运行仿真。江学谦让我不要做无谓的尝试，但是我还是想试试，这一次运气很

好，也没有像江学谦想象的那样，出错的指令很快的就找到了，是乘除法指令，我马上就

想到了前几天在加新指令的时候更改过hilo 模块的接口和设计，定位后发现是一个数据相

关问题导致的错误，第一次写的时候考虑了，但是加新指令的时候忘记考虑，然后在不同

的情况下有时刚好冲突能取对数据，有时又不对。更改错误以后，整个功能测试和性能测

试又能正常工作了，但是性能下降了好几倍，我和江学谦感到很疑惑，明明主频没有变，

TLB 又是组合逻辑实现的，性能应该不会受到影响才对。

添加完MIPS32 R1 的指令后，我把上次移植的ucore 的Makefile 又改了回来，所以

ucoe 实际上就只改了串口地址和中断号，然后直接编译出来，烧录至flash 中。江学谦也

给面子，停下手中工作，帮忙调ucore。调试过程中，江学谦无意间发现了当初启动Linux

时Cache 没有工作的原因——因为添加TLB 模块时新添加Cache 属性端口，可以直接连接

到龙芯开源的转换桥上，于是我就很暴力的把值赋给转接桥的的输出，但是Cache 属性只

能维持一个周期，之后便不会正常工作，所以Cache 便失去了原本的功能，纯粹变成一个

通路。可笑的是Cache 没有启动，并不会对系统的功能产生任何错误影响，顶多影响一下

性能，所以我们便一直查不到这个问题。修复后性能分数又回到了初赛时候的分数。

Cache 正常工作后，引导程序加载启动过程瞬间变快了很多，也让我们觉得启动操作

系统有了希望。但是这次系统还是没有正常运行起来，庆幸的是上次没有解决的问题这一

次却没有出现了，转而出现的是另一个问题——有一段指令和地址没有对上，追踪发现指

令能够正常读入Cache，但是出来时却又对不上了。似乎是Cache 这个IP 核内部出现了问

题。

无论如何，现在我们的信心提升了许多。第二天早上王老师问到我们的情况，我说有

希望了。于是下午陆老师又和王老师过来看我们的工作进展，但是还是没有什么内容可以

展示。开会时我在一旁和老师讨论，提出Cache 导致的指令地址不对齐的问题，王老师给

出了很多可能的意见，但是都不太吻合。后来话题又转到去南京比赛的食宿行程问题，和

陆老师商议着定了住宿的酒店，会议便结束了。然后我转头过来看项目的时候，江学谦告

诉我他已经把问题解决了。。。

这次Cache 的问题在对于burst 类型的不了解。System Cache IP 核使用的是WRAP

burst，但是我们自己写的flash 控制器支持的是INCR burst。两种burst 传输的方式不同，

所以导致从flash 中取出来的指令经过Cache 后产生地址不对齐的情况。我好奇江学谦是怎

么发现这种bug 的，因为之前我连这两种burst 都没有听说过，他说我查了System Cache

IP 核的手册后发现的。

Cache 的问题总算解决了，但是操作系统没有按照预想情况在串口输出信息，于是我

们便回去看ucore 的串口部分代码，然后发现ucore 的串口并不适用于16550。可是我们明

明看到NaiveMIPS 里面就是用的16550，然后江学谦就问我是不是把代码的分支下错了，

后来去到GitHub 一看果然是把分支下错了，本该下载的是for-NSCSCC，但是我却下成了

ucore-fix，我果然是坑队友的一把好手。代码分支调整后，按照之前的改动，将串口地址

和中断号一改便可以用了。但是这次在我电脑上却怎么也编译不过去，我看着Makefile 里

面的编译选项不知道怎么调整，江学谦和我试着把编译参数改了好几遍依然宣告失败，完

全不知道作者用的是什么版本的编译器。最后我对江学谦说不如移到你的电脑上试试，运

气真好，一遍就编译过了，改都不用改，我问他你用的是什么编译器，他说是我自己配置

的。

再次启动的时候抱着这次还是不会成功，还要继续调bug 的心态，没想到屏幕上刷刷

刷打印出来很多东西，ucore 终于运行到了shell 界面，心情那叫一个激动。当我准备输入

几个命令测试ucore 的时候，串口却没有任何的反应信息，ucore 像是就此卡住了。这时候

其实我们挺犯难的，到底是硬件的问题，还是软件的问题？江学谦把问题定位到了一条跳

转指令并未及时跳转上。

第二天一早我们又重新把昨天的情况复现了一遍。江学谦用ILA 把板子的运行状态抓

取出来，现在系统运行在一个死循环里出不来，不到一会，他的耐心显然就有些磨损了。

我则把昨天的那条跳转指令的实现复核了一遍，却没有发现任何问题，后来只能试着把循

环的地址一一抄写出来，然后对着反编译出来的代码找寻进入死循环的原因。江学谦照着

我写的地址和ILA 抓取的波形做了对比，发现又有一条指令和地址对不上，这才是跳转指

令没有及时跳转的原因。为什么又是指令和地址对不上，上次调这种bug 都调的快要吐血

了。但是至少现在排除了是软件的问题，但是到底是流水线问题，还是SoC 的问题？又该

从哪里下手，以什么样的方式定位呢？

按照习惯，我们先把AXI 通道的信号抓取出来，于是ILA 的第一个窗口便布满了AXI

的各种信号。看完后江学谦一口笃定SoC 外部AXI 读取回来的那条指令与地址是完全正确

的。那么就再往前抓取信号，发现送入流水线内部的指令和地址已经是错误的。当时我还

是觉得问题并没有出在我这边，因为流水线经过了这么多轮的测试，指令的实现上不会再

出bug 了才对，于是目光只能转到之前写的SRAM 转类SRAM 的转换桥上。刚开始加入

的信号不完整，我还是认为这个模块没有问题，但是排除过AXI 的问题和流水线的问题，

就只剩下这个部分了。于是我从头到尾的又把这个模块的信号量全部加进来，终于确定了

是这个模块出现的问题。思来想去，我还是想不明白问题出在了哪里，于是对着代码一遍

遍模拟运行状态，想当前状态机的运行情况，终于把导致错误的情况给找出来了。

真的想不到之前能够运行通过所有功能测试，但是却偏偏遇不到类SRAM 接口同时返

回addr\_ok 和flush 的情况。其实这种情况我当时在写转换桥的时候，认真考虑过addr\_ok

和flush 的优先关系，把addr\_ok 在flush 前回来和把addr\_ok 在flush 之后回来的情况都考

虑进来了，就是没有考虑同时回来的情况。借江学谦的话说，所有bug 都是因为懒导致

的，如果当初能够设计清楚，后来就不会有那么多的bug 调了。修复完这个bug，我们又

下板跑了一次，还是运行到shell 界面卡住了，江学谦按照套路迅速定位到了转换桥的问

题，然后又是情况考虑不周，但是这次前后花了不到半个小时就修复好了。终于在9 月12

号的晚上我们把ucore 运行起来了。

### 第九节 作品的收尾工作

比赛作品的实现到了收尾阶段，剩下的时间需要把改动过的部分再加入到性能测试与

功能测试框架中，然后编写报告和答辩ppt，打包提交。陆老师和向老师让我们准备准备，

把最后的工作重心放在展示上面，14 号时做一次报告，然后给我们提些意见。第二天我花

了一下午的时间弄了个ppt。刚开始做ppt 时我便发现整个项目其实并没有太多的亮点，首

先流水线写得相当普通，性能不高，也没有抠细节，所以便一笔带过，于是便决定让报告

围绕着运行操作系统的SoC 来展开，但是做完以后还是发现展示效果非常普通，而且主线

很不清楚。

第二天见面时，向老师对我们说：“原来你们说要跑Linux，结果后来又说要跑嵌入式

操作系统，最后跌跌撞撞饶了一个大弯又回到了ucore。本来我对这事都不抱希望了，但是

前天你们又突然告诉我成了。要是你们当初一早就开始弄ucore，这事是不是能够早一个星

期就成了呢？” 我只能说：“还真不是您想的那样，那样的话说不定更成不了。”然后向老

师告诉我们现在听说只有华科跑起了ucore，国科大跑起了Linux，反正北航没有跑起来，

这对我们来说是个好消息。至少如今在老师心目中只要我们不掉链子，至少是个二等奖。

接着我花了不到5 分钟时间磕磕绊绊地给老师们演示了一遍，效果显然不好，然后向老师

给我们提出了很多意见，包括ppt 字体配色，增加内容和动画等等。听完我们的报告，向

老师又赶着去听清华同学的报告去了，我们下午刚好有小学期的网教考试，怕赶回北理工

来不及，便待在向老师的实验室里等考试开始。陆老师便和我们聊起整个学习的过程，希

望我们能够把做比赛过程的一些方法总结总结让后人有所借鉴。后来向老师听完报告回

来，告诉我们清华参赛队跑起了双核的Linux，让我再次感叹了一番。回去时我和江学谦

又说起了这事。

我：今年看来大家都好厉害的样子，既然双核都出来了，那么多发射什么的应该也

会有吧。

江：那不一定，和多发射比起来，多核是最容易的。

我：为什么？

江：你觉得多核很难吗？其实就是先启动一个核，然后用一个核带动另一个核启动，

只要多实现几条同步指令，你写的CPU 就能开始做多核了。

我：那你能做吗？

江：给我时间应该没有什么问题。

我：。。。（大佬惹不起）

回去以后，我的任务就是继续负责写文档，打包项目。江学谦则继续做他的尝试，实

现设计好的一个流水线Cache，实现了一半，他问我有没有兴趣一起写，因为他不太擅长

写流水线，我急忙否认，表示没有兴趣，后来还是硬着头皮听完他的设计，表示不太理

解，于是他也第n 次放弃了写Cache。后来我和他说到能不能趁着最后两天时间再给展示

的SoC 添加一点炫酷的效果，比如VGA 显示图片等等，江学谦听后表示so easy 啊，然后

开始一通设计，各种想法喷涌而出，听得我都觉得高大上，但是我还是止不住泼了冷水

说：“大哥，当初我们移植操作系统的时候也觉得没什么，但是真正做起来的时候却问题不

断，何况现在17 号就要提交作品，只剩下两天的时间了，所以还是做一点简单实际的

吧。”于是江学谦把剩下的一点时间放在了GPIO 和VGA 上，写了一天，调了一天，VGA

最终也只是以半成品的方式提交了上去。

提交完作品后离决赛还有几天时间，不可以改硬件但却还可以改软件。原本我们打算

试着移植一下Linux，但是小学期已经结束了，其他课程都陆续开始，如果要移植也只是

江学谦一个人干，我也不能催着他干活。从前到后忙碌了近三个月，我们怕都是不想再动

了，于是便心照不宣，默认放弃Linux 了。

## 第五章 哨声吹响响

### 第一节 省事的新指令答题

9 月20 号，我们踏上了南下的高铁，前往南京大学仙林校区。

天气的突变加上近来的操劳紧张，让我身体有些欠佳，刚去到南京就开始发烧。第二

天中午我还是打起精神去到比赛现场，准备指令集答题，因为流水线指令的实现从头到尾

都是我负责的，怕江学谦一个人搞不定。报到时，我们领了参赛的服装胸牌，还抽到了3

号的答辩顺序，就进到比赛场地开始准备。等待比赛开始期间，我头痛得趴在桌子上休

息，江学谦劝我去趟医务室买药，我说人生地不熟的，比赛也马上开始了，还是能撑过去

的。后来江学谦帮我找了组委会的工作人员，在比赛开始前的半个小时，有个工作人员跑

过来说要带我去南大的校医院，我便匆匆和他赶去了，花了半个小时才把整个流程走完一

遍。幸好有南大的袁老师开车送我赶回比赛现场，才没有错过太多内容。回来时各比赛小

组已经拿到了新的测试框架和需要实现的新指令。今年添加的新指令是MAX 指令，R 型

指令。看到这个指令时我们就笑了，因为真的很简单。前十分钟龙芯负责比赛的邢老师简

单解释了一下新的框架和指令，然后让我们先把新的测试文件初始化到RAM IP 核中，一

边加新指令，一边综合RAM IP，这样会省时间。之后，参赛队便各自着手添加指令。比

赛用的机器是自己自带的笔记本电脑，我们队用的是江学谦的笔记本，于是动手写代码的

人便是他。刚开始时江学谦一上来就往执行阶段加代码，我说你这样不行，首先译码阶段

就会报无效指令异常，应该从头一个阶段一个阶段的来。于是按照我的要求，先将新指令

的指令码在头文件中做宏定义，然后依次在译码和执行阶段识别指令并作相应操作，前后

改动代码不超过20 行，花了将近10 分钟就全部弄好了，于是我们就一边综合一边仿真。

新的测试用例是在原有的89 条指令基础上将第一条指令替换成MAX，于是还是89

条指令。仿真环境下很快就通过了第一条指令的测试，意味着我们添加的指令没有任何问

题。按照要求验收时需要查看的是仿真环境下某一特定地址处的写回结果，趁着综合还没

结束，我们查看了对应该地址的写回结果，也完全正确。不过奇怪的是，输送给执行阶段

的比较值是错的，但是结果竟然是对的。我们俩百思不得其解，陆续又添加了其他信号进

来做比对，但是还是相同的结果。为什么显示两个比较的数是0x12340000 和0x12340000

（具体的数我也忘了，编了个类似的数说明），按理由相等输出的也是0x12340000 才对，

但是写回结果却是0x1234abcd，而且还是正确的。我只能说不管了，掩盖住事实的真相，

然后只让他看结果就是了。不一会综合的结果也出来了，我便把实验板拿出来准备下板测

试，看着我们那么早就拿出实验箱，周围几个队都有些坐不住了。下板测试后依然是正确

的，于是我们就再也没有想过那个问题，也许是我们查看的方式不对，也许是软件有问

题？总之这件事成为了一桩千古悬案。比赛两点钟开始，五点才结束，组委会为了不让大

家有压力，三点才开始验收，验收完也不能走，但可以在在座位搭建系统，因为五点钟以

后还有专家组过来看演示。我只能坐在位置上发呆，让实验板一遍遍跑动测试用例，等着

开始验收。后来邢老师走到我们旁边，我小声问他能不能验收，他过来一一查看了仿真和

下板的情况，2 点50 分的时候终于把指令集测试都验收完毕了。

### 第二节 为 ucore 添加新功能

由于ucore 的演示功能太少，只有简单的几个命令可以在shell 界面输出些信息，比如

ls，cat 之类的，于是趁着仅剩的半天时间，我让江学谦在往里面添加一些新的功能，他也

很快就加了一个计算斐波那契数列的命令。我说这样也太不炫了，能不能把LCD 弄起来，

比赛之前我按照NaiveMIPS，尝试过一遍，还差一点就能完成。于是江学谦将NaiveMIPS

的LCD 功能IP 核和代码复制出来，准备往我们搭建的SoC 中移植。因为我们整体SoC 的

时钟和外部的接口与NaiveMIPS 并不相同，所有只能按照自己的想法搭建，但是之前在我

看来也并不是难事，无非是把模块代码拖进去连接时钟，配置引脚的事。到了比赛结束

时，江学谦也已经按照和我相同的想法完成搭建，开始综合项目了。本来想等待会专家组

过来视察时就可以展示给他们看，但是综合过后项目却报错了。此时我们的电脑又开始变

卡，综合一次少说一个小时，所以展示LCD 的计划便泡汤了。专家组按时来到现场，然后

在工作人员的指引下依次查看了各组的演示，其实并没有多少组有展示的项目，最厉害的

就是清华的双核Linux，国科大的Linux 加触摸板小游戏，还有南大的超级玛丽，其他的便

是跑引导程序，或者推箱子，贪吃蛇之类的小游戏，实在没有的就是记忆小游戏。我们组

的地理位置刚好被排到了最后一个，展示的时候我大概介绍了一下操作系统的启动过程，

然后ucore 启动花了太长时间，第一波老师直接就走了，走了。。。后来清华的刘老师过来

看到我们启动了ucore，问我们花了多长的时间弄好的。当时我能看得出他脸上的惊喜和诧

异，然后我说9 月分才开始弄的，前后两个星期左右吧。他止不住向周围老师介绍这是北

理工的，又对我说：“当时看你们在清华的时候好像做得挺艰难的样子，怎么感觉一下子又

做出来了呢？”我笑了笑不语，是的，做的确实挺艰难，但却不是一下子就做出来的。

等我们展示完成后，江学谦告诉我他找的了LCD 的问题所在。因为系统的复位信号一

直采用的是Processor System Reset IP 核产生的复位信号，而且这个复位信号指定采用一种

内部特定的flip flop 才能驱动，不能够直接接到IO 设备上，直到那时我才知道为什么

NaiveMIPS 放着好好的能直接产生reset 信号的IP 核不用，非得自己实现。我们的解决方

案是在IP 核产生的复位信号和IO 引脚间再加入一个用Verilog 实现的寄存器。经过改动，

我们将原本能够在NaiveMIPS 上的ucore 运行我们搭建的SoC 上，并且在LCD 显示出实

现设定好的图片。为了进一步做出改动，我说能不能把图片换一换，甚至能做成现场拍摄

一张照片然后显示在LCD 上，江学谦回答说可以。我找了张北理工校徽的图片，然后按照

他的要求裁成相应的分辨率大小。江学谦找出他在图像处理课上做的大作业，然后把图象

转成了相应数据，准备移植到ucore 中去。原本打算放在用户态然后通过串口加载，尝试

了一次后发现空间太小又放弃了。饥肠辘辘的我们决定还是先吃晚饭再接着干活。吃晚饭

的时候，陆老师和我们透露了她收集的情报信息。陆老师和西工大的老师同学们聊过一

会，西工大的老师推荐了一本书，但是当时记不住名字。西工大在两届比赛中都获得性能

第一名的成绩，今年更是包揽了前两名。吃过晚饭后，回到住宿的地方我便休息下了，也

没有再对换图片的事情抱太多希望。江学谦则在在办公桌上挑灯夜战。记得很多次我醒来

看见窗旁的台灯一直亮着，以为天色还不算晚。然后半夜我起来喝水时江学谦指了指LCD

屏幕上的图片，一个北理的校徽赫然显示在上面，我欣喜的问他怎么做到的，他说把图片

换到内核态了。

### 第三节 开始我们的表演

因为是第三个答辩，所以第二天早上我们便早早的起了床。去到吃早餐的地方时，便

看到陆老师和西工大的老师相谈甚欢，看来这趟行程我们取了不少经呢。吃早餐时我问江

学谦他昨晚几点睡的，他说一直做到四点多才睡的。去到比赛现场时，答辩已经开始了。

第一个答辩的队伍是清华，我说好险没有抽到第二个，否则评委老师心里面肯定会有落差

的。我们在等候室等待工作人员的通知，期间将答辩的过程有又走了一遍。很快，就轮到

我们答辩。按照先前的分工，我负责讲PPT 内的所有内容，然后江学谦做展示和回答问

题。PPT 的内容我已经看过无数遍，演讲稿也都烂熟于心。整个答辩是15 分钟，讲ppt7

分钟，专家提问8 分钟。原本我以为展示系统的时间不计入7 分钟的讲ppt 时间，然后答

辩前一天才得知这一消息。当时也觉得没有问题，因为平时正常讲完ppt 是6 分半，再加

快点速度就行，而且ucore 本来命令就少，如果提前加载好，半分钟足够展示了。因为我

们留给展示的时间很短，所以旁边的计时老师可能真的觉得我会讲不完还是咋的，隔三岔

五的就给我提醒一次时间，搞得我原本可以很流利的讲完，还是不小心停顿了几下。在我

展示ppt 的时候，江学谦在一旁启动系统，最后还有一分钟的时候，我赶忙把串口线插到

我的电脑上，按照计划就应该开始输命令展示，但是却看到ucore 还在启动过程，当时江

学谦指了指他电脑屏上的信息，我便知道发生了什么事。ucore 启动以后还是会时不时崩一

下，然后又得重启。当时我有点冒冷汗，因为平时至少2 分钟才能完全加载出整个系统。

幸好，系统是在几分钟前崩溃的，等了10 多秒钟，就进入了shell 界面，江学谦赶忙输入

了ucore 的几个指令，但是遗憾还是剩下了LCD 的功能没能展示出来。但是至少证明了我

们的SoC 是能够运行操作系统的。

展示完接着便是提问环节，当时现场坐着几十个老师，每排座位四个人，整整一个小

教室。第一个问题老师便就着我在ppt 中讲到的流水线的缺憾展开。我在ppt 中提到由于

阶段功能过多，导致流水线的主频难以提升。原本我对这个问题的了解限于当时主频卡在

80Mhz 的那条长长的路径上。

评委老师甲：是那个阶段导致的？

江：是执行阶段的逻辑过多。

我：（不是译码阶段？）

评委老师乙：你们是怎么知道这个阶段的逻辑多的呢？

江：通过分析Vivado 综合过后的电路图发现执行阶段所经过的路径最多。

我：（我以前怎么没有发现？）

评委老师丙：那你们在执行阶段里面做了什么呢？

江：部分译码，计算结果，乘除法等。

评委老师甲：你们在执行阶段还做译码？

江：对。

其他老师：op code， func code 这些的。

评委老师乙：那你们乘法模块怎么做的？

江：乘法是自己做的，用的DSP 综合出来。

评委老师乙：那除法模块呢？

我：除法模块用的开源代码，期间会阻塞流水线。

其他评委老师：所以其实流水线并没有流起来，做成多周期的了。

江：是这样的。

我：（是这样的？）

评委老师丁：刚才看到你们那个流水线出来又是转换成类SRAM 又是转换成AXI，中

间还接Cache，为什么要转来转去呢？

我：（急忙再打开ppt，转到那一页）。

评委老师乙：那个Cache 是什么Cache？（丁的问题已被淹没）。

我：直接用的Xilinx 的IP 核（敢情老师问的东西没有一个是自己写的）。

评委老师丁：那是接在流水线里还是系统的Cache 呢？

江：系统Cache。

评委老师甲：你们刚才说的用ILA 调试，不用可以查出来吗？

我：不行，因为下板后系统的状态是未知的，必须通过ILA 采集数据后才能够知道系

统的状态。

评委老师甲：那么这个东西是怎么找到的呢？

我：是Vivado 自带的一个功能。

刘老师：那你们觉得跑起ucore 来有什么可以给大家借鉴的地方呢？

计时老师：最后一个问题。

江：首先是测试足够的充足，我们不仅用了龙芯的测试用例，而且用到了向老师给的

一些测试用例。其次是操作系统不能直接下板，要配置qemu，然后在仿真环境

下调通再下板继续调试。

走出答辩的教室，陆老师迎面走过来问我们结果如何，我说有些遗憾，系统崩溃了，

江学谦花了一晚上才做好的功能，最后还是没能演示。陆老师安慰我说幸好不是在演示的

时候崩的。回到等待答辩的教室时，其他学校的参赛队员凑过来询问评委老师都问了些什

么问题，我说老师都是具体围绕着作品来提问，都很专业和深入。然后我和江学谦谈起刚

才评委老师们问的问题。

我：评委老师们问的问题我有好几个都答不上来，这次多亏了你。那个执行阶段逻辑

过多和流水线没有流起来是怎么回事，

江：（惊讶）你居然不知道。

我：我在实现的时候只关注了功能，其他的完全没有关注到啊。

（于是我们又再次讨论起流水线的性能问题。）

我：如何在原本设计的基础提高性能，是不是做一个流水线内的Cache 会好很多呢？

江：我们现在的设计，从一开始就注定不会有一个好的性能，比如用一个ctrl 模块就

控制了整个流水线的暂停。

我：没有办法，因为这是我唯一学过的解决办法，智商又不够，想不出更好的解决办

法，就只能参照别人的设计。如果你能够想出来，我也同意用你的想法。

后来陆老师把话题转到了如何构造一个性能更优的流水线，如何更好地去学习相关理论知

识上。印象最深的是江学谦说要系统地学习，并对知识有个全局的把握。但是我却反问他

这个系统的定义什么，怎么知道自己学习的知识是不是系统的，有没有什么书籍，资料推

荐。江学谦却说没有。陆老师问他：“那你是怎么学的？”江学谦说靠平时的积累。后来陆

老师又和我们说起西工大的设计，据介绍他们的设计全都是参考《计算机组成与设计》这

本书，我也好奇西工大的流水线架构是什么样的。于是我找到上一届比赛答辩的ppt，上届

比赛两个队在ppt 上展示的流水线架构和书中的确实一模一样。

### 第四节 成绩单下达

比赛第三天早上是颁奖典礼，各参赛队伍的成绩都是未知的，一切都还保留着悬念。

陆老师前些天和我说这届比赛的第一名应该又是清华了吧，跑起来双核Linux，我却说不

一定，可能是清华也可能是国科大，因为性能分国科大差不多是清华的两倍，而且国科大

的队伍也跑起了Linux，无论如何，我觉得评委在打分环节也不至于让两个队伍的差距有

那么大。决赛共有24 支队伍，初赛时我们的成绩是第17 名，特等奖一个，一等奖三个，

二等奖六个，也就是说能进入前十名就有一个二等奖。我一直对我们拿二等奖抱有一定的

希望，毕竟能跑起操作系统的队伍并不多。颁奖典礼上听取了了专家对于此次比赛的点

评，今年的参数作品质量明显比去年提高了很多。听到我们获得的是三等奖时，我转过头

和陆老师相视一笑，眼神里透露着些失落，但是其实这结果和我心里面预期的差不多，因

为我知道性能确实很重要。整个决赛的评分标准是这样的，新添加指令20 分，其实基本上

大家都拿到了，性能分30 分，答辩演示50 分，其中展示的新颖独特性20 分，答辩讲解

30 分。虽然看起来性能的30 分并不占大头，但是按照我们和第一名10 几倍的差距，估计

只拿到了不到3 分。虽然其他队伍没有运行起操作系统，也并不影响答辩环节讲自己如何

构造的流水线，而且展示环节只要有一定的应用能够展示，也不会拉开什么巨大差距，况

且ucore 本身展示起来也就是一个串口工具，输入几个命令，并没有让人觉得有多么了不

起。况且别的参赛队应该老早就开始入手写CPU 了吧，哪像我们就花了两个月，都没来得

及迭代产品。

这样的结果让我心服口服，因为我们确实存在很大的短板，比赛的比较本身就可以从

多个方面进行，既可以从提高性能入手，也可以从搭建SoC，运行系统和各种应用程序入

手。三等奖的奖品是两本书，一本是胡伟武老师编著的《计算机体系结构》，一本是

Patterson 和Hennessy 写的《计算机组成与设计》，正好就是西工大老师推荐参考教材。


下午，我们坐上回程的高铁，告别为期三天的南京比赛之旅。

## 第六章 路漫漫其修远兮

到这里，维持了一年的比赛工作也全部结束。这是我所参加过的耗时最长，难度最大

的一场比赛。向老师经常问我们参加这个比赛值不值得，能够坚持下来的原因是什么？江

学谦回答是兴趣爱好，因为感兴趣，是自己想做的事所以坚持了下来。我的回答和他一

样，但是除此之外，我觉得能坚持下来的原因还在于有一个好的队友，从队友的身上我学

到了许许多多新的东西，不同的思想方法冲撞出不一样火花，对知识产生不一样的理解，

还在于有一群认真负责，志同道合的老师，一直很push，督促我们不断向前迈进，帮助我

们解决困难。无论如何，我们从头到尾都没有抱着功利的心态参加这个比赛。记得有一次

我和向老师说拿不拿奖无所谓，向老师说奖无所谓，但是你所做的事被不被别人认可有所

谓。最后虽然没能实现被人认可这一目标，但是在我看来这不过是个包装精美的盒子，而

我所在意的是自身的能力又没得到提高，知识有没有得到增长这枚珠子。通过这次比赛，

我知道自己懂的东西很多，但是不懂的东西却更多，愈发的发现还有更多更宽广的领域值

得自己去学习去探索。总而言之，路漫漫其修远兮，吾将上下而求索。

## 番外篇

最近一直在思考一个问题，教育方式的本质是什么？是为一个本来就懂很多，不用教

也会的人定一个目标，培养到能够完成这样一个有难度的比赛，还是把一个原本什么都不

会的人培养到能够顺利完成这样的比赛呢？参加完比赛后，老师让我们总结经验，给后人

做参考，虽然我也长篇大论写了三万字把整个比赛的过程记录了下来，但是还是有很多的

东西没能够记录下来，因为很多东西默认了接下来参加比赛的人已经会了，可是实际上真

的能够保证这一点？虽然如今我作为参赛队员之一完成了整个比赛，但是如今让我自己一

人完整复现一次我认为有些环节我还是无法做到，比如看懂整个ucore 的代码移植，编写

编译链接脚本，迅速看懂IP 核文档搜寻想要的信息，编写一个能够映射至内存的flash 控

制器，快速定位问题等等。其实我也很希望自己能够什么都懂，但不是每个人都能像江学

谦一样，有一个很好的基础，然后站得高，看的远。我希望他们不要再重蹈我的后辙，按



照原本的设计和学习线路来做，因为我发现第一次学习的内容真的会深刻影响短时间内的

作品，这点从西工大和北航的经历也可以看出来。西工大的队员都是大二的学生，为什么

我们这批大三的老鸟还比不过，因为人家的课程设计如此，手边的学习参考资料就是这

样，照着这样的设计来做就会有这样的结果。虽然不知道北航的课程和学习资料是什么，

但是从他们两届四支队伍相同的七级流水线加神经网络设计也可知一二。我在做流水线方

面给不了更多的意见，因为我的设计与主流设计不同，专业的老师们甚至会有些不了解。

至于搭建SoC 和移植操作系统，那多是江学谦的功劳，若要他给什么意见，我倒可以照着

他的口吻回答一番——自己去学。无论如何，我相信只要拥有良好的自学能力，一颗坚持

的决心，不放弃的恒心，不气馁的信心，终究会获得一个好的结果。

## 完结


